function TheSignal = Calc_MIMO_Multisine(ExcitedHarm, N, AmplExcitedHarm, RmsValues);%%       TheSignal = Calc_MIMO_Multisine(ExcitedHarm, N, AmplExcitedHarm, RmsValues)%%       Calculates one period of a MIMO random phase multisine with:%           - given amplitude spectrum (default all equal) %           - given rms values (default all equal to one)%%   OUTPUT%       TheSignal           =	One period of the MIMO time domain signal; size nu x nu x N  %                               TheSignal(:, jj, :) represents the nu excitations of the jj th experiment %%   INPUT%       ExcitedHarm         =	Excited harmonics of the multisine expressed in harmonic number; size 1 x nh %                               Note: the harmonic content is the same for all excitations %%       N                   =	Number of time domain samples in one period%%       AmplExcitedHarm     =   Optional parameter: relative amplitudes of the excited harmonics; size nu x nh  %                               Default value: uniform and nu = 1 %%       RmsValues           =   Optional parameter: rms value of each input signal; size nu x 1 %                               Default value: 1 for all signals %% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, October 2009 % All rights reserved.% Software can be used freely for non-commercial applications only.% Version 18 June 2010%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Check the input variables %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ExcitedHarm = ExcitedHarm(:).';% check if the relative amplitudes are specifiedtry    if isempty(AmplExcitedHarm)        AmplExcitedHarm = ones(1, length(ExcitedHarm));    end % empty Gccatch    AmplExcitedHarm = ones(1, length(ExcitedHarm));end % try% number of inputs and harmonics[nu, nh] = size(AmplExcitedHarm);% check if the rms values are specifiedtry    if isempty(RmsValues)        RmsValues = ones(nu, 1);    end % empty Gccatch    RmsValues = ones(nu, 1);end % tryRmsValues = RmsValues(:);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Calculation random phases MIMO signal %% for all harmonics. For each harmonic  %% the phases are calculated as          %%                                       %%   Tphase = Dleft * Mdft * Dright      %%                                       %% Dleft, Dright: diagonal matrices      %% Mdft: matrix DFT transform            % % Tphase: nu x nu unitary matrix        %%                                       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% matrix with the DFT phases for all harmonics; size nu x nu x nhIndex = [0:1:nu-1];dummy = exp(sqrt(-1)*2*pi*Index.'*Index/nu)/sqrt(nu);Mdft = repmat(dummy, [1, 1, nh]);% random phases of the excited harmonics (diagonal left-multiplier of Mdft); size nu x nu x nh Dleft = zeros(nu, nu, nh);dummy = zeros(1, nu, nh);dummy(1, :, :) = exp(sqrt(-1)*2*pi*rand(nu, nh));for ii = 1:nu    Dleft(ii, :, :) = repmat(dummy(1, ii,:), [1, nu, 1]);end % ii% random phases of the different experiments (diagonal right-multiplier of Mdft); size nu x nu x nh Dright = zeros(nu, nu, nh);dummy = zeros(1, nu, nh);dummy(1, :, :) = exp(sqrt(-1)*2*pi*rand(nu, nh));dummy(1, 1,:) = 1;for ii = 1:nu    Dright(:, ii, :) = repmat(dummy(1, ii, :), [nu, 1, 1]);end % ii% unitary phase matrix T for all harmonic; size nu x nu x nh Tphase = Dleft.* Mdft .* Dright;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Amplitudes MIMO signal for all harmonics %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Tampl = zeros(nu, nu, nh);dummy = zeros(1, nu, nh);dummy(1, :, :) = AmplExcitedHarm;for ii = 1:nu    Tampl(ii, :, :) = repmat(dummy(1, ii, :), [1, nu, 1]);end % ii%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% calculation time domain MIMO signal %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%S = zeros(nu, nu, N);S(:, :, ExcitedHarm + 1) = Tampl .* Tphase;TheSignal = 2*real(ifft(S, [], 3));rmsSignal = rms(TheSignal, 3);% set the rms valuesTheSignal = TheSignal ./ repmat(rmsSignal, [1, 1, N]);   % rms value = 1TheSignal = TheSignal .* repmat(RmsValues, [1, nu, N]);  % the signals of the same row have the same rms value 