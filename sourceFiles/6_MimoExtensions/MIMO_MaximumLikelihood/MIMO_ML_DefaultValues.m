function [Sel, Theta0, ModelVar, IterVar] = MIMO_ML_DefaultValues(na, nb, nu, ny, PlantPlane, ModelStruct, Recip, Transient);%%  [Sel, Theta0, ModelVar, ItterVar] = MIMO_ML_DefaultValues(na, nb, nu, ny, PlantPlane, ModelStruct, Recip, Transient);%%		Generates the default values and structures for the estimation of MIMO common denominator plant model structures: %       see the MIMO_ML function for the definition of the variables%%					Box-Jenkins:		Y = B/A U + Ig/A  + C/D E + Jh/D%%	Output parameters%%		Sel					=	selection of the estimated and the known coefficients %								Sel = struct('A', [],'B', [], 'Ig', [])%									Sel.A = 1 x (OrderA+1)%										Sel.A(r) = 1 if coeff. a(r-1) is unknown%										Sel.A(r) = 0 if coeff. a(r-1) = 0%									Sel.B = ny x nu x (OrderB+1)%										Sel.B(i,j,r) = 1 if coeff. b(i,j,r-1) is unknown%										Sel.B(i,j,r) = 0 if coeff. b(i,j,r-1) = 0%									Sel.Ig = ny x (OrderIg+1)%										Sel.Ig(i,r) = 1 if coeff. ig(i,r-1) is unknown%										Sel.Ig(i,r) = 0 if coeff. ig(i,r-1) = 0%									Sel.C = ny x ny x (OrderC+1)%%		Theta0				=	starting value plant, noise, and initial conditions parameters%								Theta0 = struct('A', [], 'B', [], 'Ig', [])%									Theta0.A = 1 x (OrderA+1)%										Theta0.A(r) = coefficient a(r-1) of Omega^(r-1) %									Theta0.B = ny x nu x (OrderB+1)%										Theta0.B(i,j,r) = coefficient b(i,j,r-1) of Omega^(r-1)%									Theta0.Ig = ny x (OrderIg+1)%										Theta0.Ig(i,r) = coefficient ig(i,r-1) of Omega^(r-1) %%		ModelVar			=	contains the information about the model to be identified%								ModelVar = struct('Transient', [], 'PlantPlane', [], 'Struct', [], 'Reciprocal',[])%									ModelVar.Transient		=	1 then the initial conditions of the plant and/or noise are estimated %									ModelVar.PlantPlane		=	plane of the plant model%																	's':	continuous-time;%																	'w':	sqrt(s)-domain%																	'z':	discrete-time;%																	'':		plane not defined%									ModelVar.Struct			=	model structure %																	'EIV':  errors-in-variables (noisy input-output data)%																	'OE':	generalised output error (known input, noisy output)%									ModelVar.RecipPlant		=	1 if plant model is reciprocal: G(i,j) = G(j,i)%%		IterVar				=	contains the information about the minimization procedure%								IterVar = struct('LM', 1, 'MaxIter', 100, 'TolParam', 1e-6, 'TolCost', 1e-10, ...%                                                    'TraceOn', 1, 'NormJacob', 1)%									IterVar.LM 			=	1 then then Levenberg-Marquardt minimization scheme is used%									IterVar.MaxIter 	=	maximum number of itterations of the minimization procedure%									IterVar.TolParam 	=	relative precision on parameter estimates%									IterVar.TolCost 	=	relative precision on cost function%									IterVar.TraceOn 	=	1 then output iterations %									IterVar.NormJacob 	=	1 scales the columns of the Jacobian matrix such that the columns have norm one %%	Input parameters%%		na				=	order A polynomial%		nb				=	order B matrix polynomial%		nu				=	number of inputs%		ny				=	number of outputs%		PlantPlane		=	domain plant model: 'z' for z-domain, 's' for s-domain, 'w' for sqrt(s)-domain%                           (optional, default 'z')%       ModelStruct     =   model structure: 'OE', 'EIV' %                           (optional, default EIV)%       Recip           =   1 if plant model reciprocal; otherwise zero%                           (optional, default 0, non-reciprocal plant) %       Transient       =   1 if the plant transient parameters are estimated %                           (optional, default 0, transient parameters)%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, November 2009% All rights reserved.% Software can be used freely for non-commercial applications only.% version 11 October 2011%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% initialisation variables %%%%%%%%%%%%%%%%%%%%%%%%%%%%%try    if isempty(PlantPlane)        PlantPlane = 'z';       % default discrete-time     end % if   catch	PlantPlane = 'z';           % default discrete-time end % trytry    if isempty(ModelStruct)        ModelStruct = 'EIV';	% EIV     end % if   catch	ModelStruct = 'EIV';        % EIV end % trytry    if isempty(Recip)        Recip = 0;              % default non-reciprocal     end % if   catch	Recip = 0;                  % default non-reciprocal end % trytry    if isempty(Transient)        Transient = 0;          % default no transient removal (has been removed non-parametrically     end % if   catch	Transient = 0;              % default no transient removal (has been removed non-parametrically end % trynig = max(na, nb) - 1;          % correct in z-domain; should be increased for s- and sqrt(s)-domainsSel = struct('A',[], 'B',[], 'Ig', []);	Sel.A = ones(1, na+1);	Sel.B = ones(ny, nu, nb+1);	if (nig < 0) | (Transient == 0)		nig = 0;		Sel.Ig = zeros(ny, nig+1);	else		Sel.Ig = ones(ny, nig+1);	end	Theta0 = struct('A',[], 'B',[], 'Ig', []);	Theta0.A = zeros(1, na+1);	Theta0.A(1) = 1;	Theta0.B = zeros(ny, nu, nb+1);	Theta0.B(:,:,1) = eye(ny, nu);	Theta0.Ig = zeros(ny, nig+1);	ModelVar = struct('Transient', [], 'PlantPlane', [], 'Struct', [], 'RecipPlant', [], ...				   'nu', [], 'ny', [], 'na', [], 'nb', [], 'nig', []);	ModelVar.Transient = Transient;	ModelVar.PlantPlane = PlantPlane;	ModelVar.Struct = ModelStruct;	ModelVar.RecipPlant = Recip;	ModelVar.nu = nu;	ModelVar.ny = ny;	ModelVar.na = na;	ModelVar.nb = nb;	ModelVar.nig = nig;	IterVar = struct('LM', [], 'MaxIter', [], 'TolParam', [], 'TolCost', [], 'TraceOn', [], 'NormJacob', []);	IterVar.LM = 1;	IterVar.MaxIter = 100;	IterVar.TolParam = 1e-6;	IterVar.TolCost = 1e-10;	IterVar.TraceOn = 1;    IterVar.NormJacob = 1;[Theta0, Sel, ModelVar] = MIMO_ML_ModelCompatibility(Theta0, Sel, ModelVar);