function [Sel, ModelVar] = MIMO_WTLS_ModelCompatibility(Sel, ModelVar);%% function [Sel, ModelVar] = MIMO_WTLS_ModelCompatibility(Sel, ModelVar);%%	The coefficients are chosen such that Y = B/A U + Ig/A is valid%%	Input/Output parameters%%		Sel					=	selects the parameters to be estimated; 1 = estimated; 0 = known %								Sel = struct('A', [], 'B', [], 'Ig', [])%									Sel.A = 1 x (OrderA+1)%										Sel.A(r) = 1 if coeff. a(r-1) is unknown%										Sel.A(r) = 0 if coeff. a(r-1) = 0%									Sel.B = ny x nu x (OrderB+1)%										Sel.B(i,j,r) = 1 if coeff. b(i,j,r-1) is unknown%										Sel.B(i,j,r) = 0 if coeff. b(i,j,r-1) = 0%									Sel.Ig = ny x (OrderIg+1)%										Sel.Ig(i,r) = 1 if coeff. ig(i,r-1) is unknown%										Sel.Ig(i,r) = 0 if coeff. ig(i,r-1) = 0%%		ModelVar			=	contains the information about the model to be identified%								structure with fields 'Transient', 'ThePlane', 'TheModel', 'Reciprocal'%									ModelVar = struct('Transient', [], 'PlantPlane', [], 'Struct', [], 'Reciprocal', [])%									ModelVar.Transient		=	1 then the initial conditions of the plant and/or noise are estimated%									ModelVar.PlantPlane		=	plane of the plant model%																	's':	continuous-time;%																	'w':	sqrt(s)-domain%																	'z':	discrete-time;%																	'':		plane not defined%									ModelVar.Struct			=	model structure%																	'EIV':  errors-in-variables (noisy input-output data)%																	'OE':	generalised output error (known input, noisy output)%									ModelVar.RecipPlant		=	1 if plant model is reciprocal: G(i,j) = G(j,i)%									ModelVar.nu				=	number of inputs%									ModelVar.ny				= 	number of outputs%									ModelVar.na				=	order polynomial A%									ModelVar.nb				= 	order matrix polynomial B%									ModelVar.nig			=	order vector polynomial Ig%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, 25 November 2009% All rights reserved.% Software can be used freely for non-commercial applications only.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% initialisation variables %%%%%%%%%%%%%%%%%%%%%%%%%%%%%ny = ModelVar.ny;	% number of outputsnu = ModelVar.nu;	% number of inputs%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% if no transient terms are estimated then the plant transient parameters do not exist %    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if ~ModelVar.Transient    Sel.Ig = zeros(ny,1);end % if no transient%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% imposes the common plant model parameter structure for the reciprocal case %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if ModelVar.RecipPlant	    for jj = 1:nu							% column index        for ii = 1+jj:ny					% row index            lji = jj + ny*(ii-1);			% block position coefficients b(jj,ii) polynomial            % reciprocity plant model		            if lji <= nu*ny					% test for rectangular matrices                Sel.B(jj,ii,:) = zeros(size(Sel.B(jj,ii,:)));            end % if        end % ii    end % jjend % if reciprocal plant    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% add the model orders to ModelVar %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ModelVar.na = size(Sel.A,2) - 1;	% order polynomial AModelVar.nb = size(Sel.B,3) - 1;	% order matrix polynomial BModelVar.nig = size(Sel.Ig,2) - 1;	% order vector polynomial Ig