function Deriv = MIMO_ML_CalcDeriv(xMat, PolyTrans, ModelVar);%% function Deriv = MIMO_ML_CalcDeriv(xMat, PolyTrans, ModelVar);%%		Calculates the derivative of the rational transfer function matrix G = B/A, %		and the rational vector function Tg = Ig/A w.r.t. the model parameters. For the transfer%		function matrix G the derivative of vec(G) is calculated%%	Output parameter%%		Deriv		=	structure containing the derivative of vec(G), and Tg, w.r.t. all the plant model parameters a, b, ig %						    Deriv.vecGa	=	derivative vec(G) w.r.t. a; size ny*nu x (na+1) x F %						    Deriv.vecGb	=	derivative vec(G) w.r.t. b; size ny*nu x ny*nu*(nb+1) x F %                                               b = reshape(permute(Theta.B, [3,1,2]), [ny*nu*(nb+1),1]) %						    Deriv.Tga	=	derivative Tg w.r.t. a; size ny x (na+1) x F %						    Deriv.Tgig	=	derivative Tg w.r.t. ig; size ny x ny*(nig+1) x F %                                               ig = reshape(permute(Theta.Ig, [2,1]), [ny*(nig+1),1]) %% Input parameters%%		xMat		=	structure with tables of powers of (jwk)^r or (zk^-r)%							xMat.Plant		=	plant model, size: F x max order%%		PolyTrans	=	structure containing the polynomials and transfer functions evaluated in x%							PolyTrans.A		=	denominator polynomial plant transfer function evaluated in x.Plant, size 1 x F %							PolyTrans.G		=	plant transfer matrix evaluated in x.Plant, size ny x nu x F %							PolyTrans.Tg	=	plant transient term evaluated in x.Plant, size ny x F %%		ModelVar	=	contains the information about the model to be identified%						structure with fields 'Transient', 'ThePlane', 'TheModel', 'Reciprocal', ...%							ModelVar.Transient		=	1 then the initial conditions of the plant and/or noise are estimated%							ModelVar.PlantPlane		=	plane of the plant model%															's':	continuous-time;%															'w':	sqrt(s)-domain%															'z':	discrete-time;%															'':		plane not defined%							ModelVar.Struct			=	model structure%															'EIV':  errors-in-variables (noisy input-output data)%															'OE':	generalised output error (known input, noisy output)%							ModelVar.RecipPlant		=	1 if plant model is reciprocal: G(i,j) = G(j,i)%							ModelVar.nu				=	number of inputs%							ModelVar.ny				= 	number of outputs%							ModelVar.na				=	order polynomial A%							ModelVar.nb				= 	order matrix polynomial B%							ModelVar.nig			=	order vector polynomial Ig%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, 27 November 2009% All rights reserved.% Software can be used freely for non-commercial applications only.%Deriv = struct('vecGa', [], 'vecGb', [], 'Tga', [], 'Tgig', []);F = size(xMat.Plant,1);na = ModelVar.na;nb = ModelVar.nb;nig = ModelVar.nig;ny = ModelVar.ny;nu = ModelVar.nu;Deriv.vecGa = zeros(ny*nu, na+1, F);Deriv.vecGb = zeros(ny*nu, ny*nu*(nb+1), F);Deriv.Tga = zeros(ny, na+1, F);Deriv.Tgig = zeros(ny, ny*(nig+1), F);% divide xMat.Plant by A-polynomialMaxOrder = size(xMat.Plant, 2);xMat.Plant = xMat.Plant./repmat(PolyTrans.A.',1,MaxOrder);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Fast calculation of the derivative of vec(G) w.r.t. a. The lines below are equivalent with % % for kk = 1:F                                                                               % %	 vecG = PolyTrans.G(:,:,kk);                                                             %   %	 vecG = vecG(:);                                                                         % %	 Deriv.vecGa(:,:,kk) = - vecG * xMat.Plant(kk, 1:na+1);                                  % % end                                                                                        % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%for ii = 1:nu*ny        column = ceil(ii/ny);    row = ii - (column-1)*ny;    % squeeze function on 1 x 1 x F delivers F x 1 !!!    G = squeeze(PolyTrans.G(row, column, :));    Deriv.vecGa(ii,:,:) = -(xMat.Plant(:, 1:na+1) .* repmat(G, [1, na+1])).';    end % ii%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Fast calculation of the derivative of vec(G) w.r.t. b. The lines below are equivalent with % % for kk = 1:F                                                                               % %	 Deriv.vecGb(:,:,kk) = kron(eye(nu*ny, nu*ny), xMat.Plant(kk, 1:nb+1));                  %   % end                                                                                        % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%for ii = 1:nu*ny        vii = zeros(nu*ny, 1);    vii(ii) = 1;    Deriv.vecGb(ii,:,:) = kron(vii, (xMat.Plant(:, 1:nb+1)).');    end % ii%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Fast calculation of the derivative Tg w.r.t. a. The lines below are equivalent with        % % for kk = 1:F                                                                               % %	 Deriv.Tga(:,:,kk) = - PolyTrans.Tg(:, kk) * xMat.Plant(kk, 1:na+1);                     %   % end                                                                                        % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%for ii = 1:ny        Tg = PolyTrans.Tg(ii, :).';    Deriv.Tga(ii,:,:) = -(xMat.Plant(:, 1:na+1) .* repmat(Tg, [1, na+1])).';    end % ii%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Fast calculation of the derivative of Tg w.r.t. ig. The lines below are equivalent with    % % for kk = 1:F                                                                               % %	 Deriv.Tgig(:,:,kk) = kron(eye(ny, ny), xMat.Plant(kk, 1:nig+1));                        %   % end                                                                                        % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%for ii = 1:ny        vii = zeros(ny, 1);    vii(ii) = 1;    Deriv.Tgig(ii,:,:) = kron(vii, (xMat.Plant(:, 1:nig+1)).');    end % ii