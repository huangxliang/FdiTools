function [Theta, Sel] = MIMO_ML_MonicModel(Theta, Sel, ModelVar);%% function [Theta, Sel] = MIMO_ML_MonicModel(Theta, Sel, ModelVar);%%	The (normalised) plant denominator polynomial is made monic%       z-domain:                   a0 = 1, %       s-, and sqrt(s)-domains:    ana = 1,%   and the selection vector is adapted accordingly.%%%	Output parameters%%		Theta				=	estimated value plant, noise, and initial conditions parameters%								Theta = struct('A', [], 'B', [], 'Ig', [])%									Theta.A     =   1 x (OrderA+1)%                                                       Theta.A(r) = coefficient a(r-1) of Omega^(r-1) %									Theta.B     =   ny x nu x (OrderB+1)%                                                       Theta.B(i,j,r) = coefficient b(i,j,r-1) of Omega^(r-1)%									Theta.Ig    =   ny x (OrderIg+1)%                                                       Theta.Ig(i,r) = coefficient ig(i,r-1) of Omega^(r-1) %%		Sel					=	selects the free model parameters in the constrained case%								Sel = struct('A', [], 'B', [], 'Ig', [], 'C', [], 'D', [], 'Ih', [])%									Sel.A       =   1 x (OrderA+1)%                                                       Sel.A(r) = 1 if coeff. a(r-1) is unknown%                                                       Sel.A(r) = 0 if coeff. a(r-1) = 0%									Sel.B       =   ny x nu x (OrderB+1)%                                                       Sel.B(i,j,r) = 1 if coeff. b(i,j,r-1) is unknown%                                                       Sel.B(i,j,r) = 0 if coeff. b(i,j,r-1) = 0%									Sel.Ig      =   ny x (OrderIg+1)%                                                       Sel.Ig(i,r) = 1 if coeff. ig(i,r-1) is unknown%                                                       Sel.Ig(i,r) = 0 if coeff. ig(i,r-1) = 0%%	Input parameters%%       Theta               =   see output parameters, unconstrained model parameters%%		ModelVar			=	contains the information about the model to be identified%								structure with fields 'Transient', 'ThePlane', 'TheModel', 'Reciprocal'%									ModelVar = struct('Transient', [], 'PlantPlane', [], 'NoisePlane', [], 'Struct', [], 'Reciprocal', [])%									ModelVar.Transient		=	1 then the initial conditions of the plant and/or noise are estimated%									ModelVar.PlantPlane		=	plane of the plant model%																	's':	continuous-time;%																	'w':	sqrt(s)-domain%																	'z':	discrete-time;%																	'':		plane not defined%									ModelVar.Struct			=	model structure%																	'EIV':  errors-in-variables (noisy input-output data)%																	'OE':	generalised output error (known input, noisy output)%									ModelVar.RecipPlant		=	1 if plant model is reciprocal: G(i,j) = G(j,i)%									ModelVar.nu				=	number of inputs%									ModelVar.ny				= 	number of outputs%									ModelVar.na				=	order polynomial A%									ModelVar.nb				= 	order matrix polynomial B%									ModelVar.nig			=	order vector polynomial Ig%%       Sel                 =   see output parameter, Selects the free model parameters in the unconstrained case%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, November 2009% All rights reserved.% Software can be used freely for non-commercial applications only.%% constraining the plant model parametersswitch ModelVar.PlantPlane    case 'z'        Scale = Theta.A(1);        Sel.A(1) = 0;    case {'s', 'w'}        Scale = Theta.A(end);        Sel.A(end) = 0;    otherwise        Scale = 1;endTheta.A = Theta.A/Scale;Theta.B = Theta.B/Scale;Theta.Ig = Theta.Ig/Scale;