function [Theta, smax, smin, wscale] = MIMO_WTLS(data, Sel, ModelVar);%%       (Weighted) total least squares estimate plant model parameters from noisy%       input-output data:%%                   sum (A(f)*Y(f) - B(f)*U(f))^H * W(f)^(-1) * (A(f)*Y(f) - B(f)*U(f))%                    f%% [Theta, smax, smin, wscale] = MIMO_WTLS(data, Sel, ModelVar);%%					%				Stochastic framework: errors-in-variables%					Y = B/A U0 + Ig/A + NY%                   U = U0 + NU%%				System with nu inputs and ny outputs%					Y:					ny x 1 observed output%					U:					nu x 1 observed input%					NY:					ny x 1 output noise%					NU:					nu x 1 input noise%%				Model class: common denominator model%					G = B/A:			ny x nu plant transfer function%					Tg = Ig/A:			ny x 1 plant transient term%					A:					polynomial of order OrderA%					B:					ny x nu matrix polynomial of order OrderB%					Ig:					ny x 1 vector polynomial of order OrderIg%%				Coefficients polynomials in raising powers of Omega, where%					s-domain			Omega = j*2*pi*freq%					sqrt(s)-domain		Omega = sqrt(j*2*pi*freq)%					z-domain			Omega = exp(-j*2*pi*freq*Ts)%					%%%	Output parameters%%		Theta				=	estimated value plant, noise, and initial conditions parameters%								structure with fields 'A', 'B', 'Ig'%									Theta = struct('A',[],'B',[], 'Ig', [])%									Theta.A = 1 x (OrderA+1)%										Theta.A(r) = coefficient a(r-1) of Omega^(r-1) %									Theta.B = ny x nu x (OrderB+1)%										Theta.B(i,j,r) = coefficient b(i,j,r-1) of Omega^(r-1)%									Theta.Ig = ny x (OrderIg+1)%										Theta.Ig(i,r) = coefficient ig(i,r-1) of Omega^(r-1) %								Note:	all coefficients (except those for which Sel = 0) are free%										during the minimization + in each iteration step the following%										constraints are imposed:%											norm([a, vec(b), vec(ig)] = 1%%		smax				=	largest singular value of the Jacobian matrix%%		smin				=	smallest singular value of the Jacobian matrix%%		wscale				=	angular frequency scaling%%%	Input parameters%%		data				=	structure containing the non-parametric data required for the identification%									data.Y		=	output DFT spectra of 1 or nu independent MIMO experiments %                                                       1 MIMO experiment:   ny x F %                                                       nu MIMO experiments: ny x nu x F %									data.U		=	input DFT spectra of 1 or nu independent MIMO experiments %                                                       1 MIMO experiment:   nu x F %                                                       nu MIMO experiments: nu x nu x F %									data.freq	=	vector of frequency values (Hz), size: F x 1%									data.Ts		=	sampling time (s)%									data.W		=	frequency weighing of the residuals in the least squares fit %                                                       1 MIMO experiment:   ny x ny x F %                                                       nu MIMO experiments: ny x ny x nu x F %%		Sel					=	structure with fields 'A', 'B', 'Ig'%									Sel = struct('A',[],'B',[], 'Ig', [])%									Sel.A = 1 x (OrderA+1)%										Sel.A(r) = 1 if coeff. a(r-1) is unknown%										Sel.A(r) = 0 if coeff. a(r-1) = 0%									Sel.B = ny x nu x (OrderB+1)%										Sel.B(i,j,r) = 1 if coeff. b(i,j,r-1) is unknown%										Sel.B(i,j,r) = 0 if coeff. b(i,j,r-1) = 0%									Sel.Ig = ny x (OrderIg+1)%										Sel.Ig(i,r) = 1 if coeff. ig(i,r-1) is unknown%										Sel.Ig(i,r) = 0 if coeff. ig(i,r-1) = 0%%		ModelVar			=	contains the information about the model to be identified%								structure with fields 'Transient', 'ThePlane', 'TheModel', 'RecipPlant' %									ModelVar = struct('Transient', [], 'PlantPlane', [], 'NoisePlane', [], 'Struct', [], 'RecipPlant', [])%									ModelVar.Transient		=	1 then the initial conditions of the plant and/or noise are estimated%									ModelVar.PlantPlane		=	plane of the plant model%																	's':	continuous-time;%																	'w':	sqrt(s)-domain%																	'z':	discrete-time;%																	'':		plane not defined%									ModelVar.RecipPlant		=	1 if plant model is reciprocal: G(i,j) = G(j,i) %%% Rik Pintelon, November 26, 2009%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% initialisation of the variables, and compatibility check of the input arguments %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% model structure variablesModelVar.PlantPlane = lower(ModelVar.PlantPlane);ModelVar.Struct = upper(ModelVar.Struct);% add number of inputs and outputs to ModelVarModelVar.ny = size(data.Y,1);ModelVar.nu = size(data.U,1);ny = ModelVar.ny;nu = ModelVar.nu;% 1. imposes the compatibility of the the free model parameters %    with the model structure% 2. puts the order of the polynomials in ModelVar[Sel, ModelVar] = MIMO_WTLS_ModelCompatibility(Sel, ModelVar);% check if DC and Nyquist belong to the frequency setif data.freq(1) == 0, data.DC = 1; else data.DC = 0; endif data.freq(end) == 1/(2*data.Ts), data.Nyquist = 1; else data.Nyquist = 0; end % determine the number of MIMO experimentsNumberDim = length(size(data.U));           % number of matrix dimensionsif NumberDim == 2    data.NumberExp = 1;                     % number of MIMO experimentselseif NumberDim == 3    data.NumberExp = size(data.U, 2);       % number of MIMO experimentsend % if% hermitian symmetric square root inverse output covariance matrixF = length(data.freq);try    Weighting = ~isempty(data.W);catch    Weighting = 0;endif Weighting    data.sqrtWinv = zeros(size(data.W));    if data.NumberExp == 1        % pseudo-inverse in case of singular weighting        data.sqrtWinv = Sqrt_Inv(data.W);     %         for kk = 1:F%             [uu, ss, vv] = svd(squeeze(data.W(:,:,kk)), 0);%             data.sqrtWinv(:,:,kk) = vv*diag(diag(ss).^(-0.5))*vv';%         end % kk            else % more than 1 MIMO experiment        for ee = 1:data.NumberExp        % pseudo-inverse in case of singular weighting            data.sqrtWinv(:,:,ee,:) = Sqrt_Inv(reshape(data.W(:,:,ee,:), [ny,ny,F]));%             for kk = 1:F%                 [uu, ss, vv] = svd(squeeze(data.W(:,:,ee,kk)), 0);%                 data.sqrtWinv(:,:,ee,kk) = vv*diag(diag(ss).^(-0.5))*vv';%             end % kk                        end % ee, MIMO experiments    end % if 1 MIMO experimentelse    if data.NumberExp == 1        % if empty put eye(ny, ny) for every frequency in data.sqrtWinv        data.sqrtWinv = repmat(eye(ny),[1,1,F]);    else % more than 1 MIMO experiment        % if empty put eye(ny, ny) for every experiment and frequency in data.sqrtWinv         data.sqrtWinv = repmat(eye(ny),[1,1,nu,F]);    end % if 1 MIMO experimentend  % jw, sqrt(jw), or exp(-jwTs) values for plant and noise modelx = struct('Plant', []);% matrix of powers of x xMat = struct('Plant', []);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% domain of the plant model %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% the vector s represents z^-1, s, or sqrt(s) of the plant modelswitch ModelVar.PlantPlane	case {'s','w'}		if ModelVar.PlantPlane == 's'			x.Plant = sqrt(-1)*2*pi*data.freq;		elseif ModelVar.PlantPlane == 'w'			x.Plant = (sqrt(-1)*2*pi*data.freq).^(0.5);		end;		wscale = median(abs(x.Plant));		x.Plant = x.Plant/wscale;	case 'z'		x.Plant = exp(-sqrt(-1)*2*pi*data.freq*data.Ts);		wscale = 1;	case ''		x.Plant = ones(size(data.freq));		wscale = 1;	otherwise, disp('Invalid plant plane ...'), returnendnmax = max([ModelVar.na, ModelVar.nb, ModelVar.nig]);xMat.Plant = MIMO_ML_CalcOmegaMat(x.Plant, nmax);%%%%%%%%%%%%%%%%%% WTLS estimate %%%%%%%%%%%%%%%%%%[Theta, smax, smin] = MIMO_LS_NewtonGaussStep(data, x, xMat, Sel, ModelVar);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% denormalize the estimated parameters for s-, and sqrt(s)-domains %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Theta = MIMO_ML_DeNormalise(Theta, wscale, ModelVar);