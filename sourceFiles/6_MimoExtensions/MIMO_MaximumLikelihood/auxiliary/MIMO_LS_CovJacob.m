function TheCovJacob = MIMO_LS_CovJacob(data, xMat, ModelVar);%%      TheCovJacob = MIMO_LS_CovJacob(data, xMat, ModelVar)%%   Calculates the column covariance matrix jacobian matrix w.r.t. ALL the plant and transient model parameters.%	The selection of the free model parameters, and the imposition of the model constraints%	(reciprocity) is done in a seperate routine%%% Output parameters%% 	TheCovJacob     =	jacobian matrix, size: ntheta x ntheta x F%%% Input parameters%%		data		=	structure containing the non-parametric data%							data.Y			=	DFT spectrum ny x 1 output signal, size: ny x F %							data.U			=	DFT spectrum nu x 1 input signal, size: nu x F %							data.freq		=	vector of frequency values (Hz), size: F x 1%							data.Ts			=	sampling time (s)%							data.CY         =	(sample) noise covariance matrix of 1 MIMO experiment Y %                           data.CU         =   (sample) noise covariance matrix of 1 MIMO experiment U  %                           data.CYU        =   (sample) noise covariance matrix of 1 MIMO experiment U %							data.sqrtWinv	=	square root of the inverse of the weighting matrix W, size: ny x ny x F %							data.DC			=	1 if DC present otherwise 0%							data.Nyquist	=	1 if Nyquist frequency present otherwise 0%%		xMat		=	structure with tables of powers of (jwk)^r or (zk^-r)%							xMat.Plant		=	plant model, size: F x max order%%		ModelVar	=	contains the information about the model to be identified%						structure with fields 'Transient', 'ThePlane', 'TheModel', 'Reciprocal', ...%							ModelVar.Transient		=	1 then the initial conditions of the plant and/or noise are estimated%							ModelVar.PlantPlane		=	plane of the plant%							model%															's':	continuous-time;%															'w':	sqrt(s)-domain%															'z':	discrete-time;%															'':		plane not defined%							ModelVar.RecipPlant		=	1 if plant model is reciprocal: G(i,j) = G(j,i)%							ModelVar.nu				=	number of inputs%							ModelVar.ny				= 	number of outputs%							ModelVar.na				=	order polynomial A%							ModelVar.nb				= 	order matrix polynomial B%							ModelVar.nig			=	order vector polynomial Ig%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, 30 November 2009% All rights reserved.% Software can be used freely for non-commercial applications only.%% note that DC and Nyquist have a contribution 1/2 to the cost function% therefore the appropriate variables must be scaled by 1/sqrt(2) at DC% and Nyquist; this is already done for the variable Error%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% initialisation of the variables %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% number of frequenciesF = size(xMat.Plant,1);% order polynomialsna = ModelVar.na;nb = ModelVar.nb;nig = ModelVar.nig;% number of outputs and inputsny = ModelVar.ny;nu = ModelVar.nu;% total number of model parametersntheta = (na+1) + (nb+1)*nu*ny + (nig+1)*ny;% column covariance matrix of the jacobian of the output% equation error at one frequencyTheCovJacob = zeros(ntheta, ntheta, F);% inverse weigthing matrixinvW = Mat_Mult(data.sqrtWinv, data.sqrtWinv);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Fast calculation of the derivative of vec(B) w.r.t. b. The lines below are equivalent with % % for kk = 1:F                                                                               % %	 Deriv.vecBb(:,:,kk) = kron(eye(nu*ny, nu*ny), xMat.Plant(kk, 1:nb+1));                  %   % end                                                                                        % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Deriv_vecBb = zeros(ny*nu, ny*nu*(nb+1), F);for ii = 1:nu*ny        vii = zeros(nu*ny, 1);    vii(ii) = 1;    Deriv_vecBb(ii,:,:) = kron(vii, (xMat.Plant(:, 1:nb+1)).');    end % ii%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% column covariance matrix w.r.t. a-parameters %%   a = Theta.A(:)                             %      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% a-parametersna1 = na+1;for ii = 1:na1    for jj = 1:ii    	TheCovJacob(ii,jj,:) = Mat_Trace(Mat_Mult(invW, data.CY)).* (conj(xMat.Plant(:,ii)) .* xMat.Plant(:,jj)).';        if jj ~= ii            TheCovJacob(jj,ii,:) = conj(TheCovJacob(ii,jj,:));        end % if jj <> ii    end % jjend % ii%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% column covariance matrix w.r.t. b-parameters                %%   b = reshape(permute(Theta.B, [3,1,2]), [ny*nu*(nb+1),1])  % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% b-parametersnb1 = (nb+1)*nu*ny;for ii = 1:nb1    ii1 = ii + na1;    Mii = reshape(Deriv_vecBb(:,ii,:), [ny,nu,F]);    for jj = 1:ii        jj1 = jj + na1;        Mjj = reshape(Deriv_vecBb(:,jj,:), [ny,nu,F]);    	TheCovJacob(ii1,jj1,:) = Mat_Trace(Mat_Mult(invW, Mat_Mult(Mjj, Mat_Mult(data.CU, Conj_Trans(Mii)))));        if jj ~= ii            TheCovJacob(jj1,ii1,:) = conj(TheCovJacob(ii1,jj1,:));        end % if jj <> ii    end % jjend % ii%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% column covariance matrix w.r.t. mixed a,b-parameters        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% a,b-parametersfor ii = 1:na1    for jj = 1:nb1        jj1 = jj + na1;        Mjj = reshape(Deriv_vecBb(:,jj,:), [ny,nu,F]);    	TheCovJacob(ii,jj1,:) = -Mat_Trace(Mat_Mult(invW, Mat_Mult(Mjj, Conj_Trans(data.CYU)))).* (conj(xMat.Plant(:,ii))).';        TheCovJacob(jj1,ii,:) = conj(TheCovJacob(ii,jj1,:));    end % jjend % ii%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DC and Nyquist count for 1/sqrt(2) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if data.DC == 1	TheCovJacob(:,:,1) = TheCovJacob(:,:,1)/2;endif data.Nyquist == 1	TheCovJacob(:,:,end) = TheCovJacob(:,:,end)/2;end