function TheError = BJError(Y, U, A, B, Ig, C, D, Jh, Gc, Transient, LogDet, DC, Nyquist);%%	TheError = BJError(Y, U, A, B, Ig, C, D, Jh, Gc, Transient, LogDet, DC, Nyquist)%%	output parameters%		TheError	=	scaled complex error model equations%%	input parameters%   Y			=	DFT spectrum output signal%   U			=	DFT spectrum input signal%	A			=	denominator polynomial plant model evaluated at the DFT freq.%	B			=	numerator polynomial plant model evaluated at the DFT freq.%	Ig			=	initial conditions polynomial plant model evaluated at the DFT freq.%	C			=	numerator polynomial plant model evaluated at the DFT freq.%	D			=	denominator polynomial plant model evaluated at the DFT freq.%	Jh			=	initial conditions polynomial noise model evaluated at the DFT freq.%	Gc			=	controller transfer function, zero or empty if unknown or not present%	Transient	=	if Transient = 1 then transient polynomial T is estimated%	LogDet		=	1 if logdet(NoiseCovarianceMatrix) is present in loglikelihood; otherwise 0%	DC			=	1 if DC present otherwise 0%	Nyquist		=	1 if Nyquist frequency present otherwise 0%% Rik Pintelon, 1998% version April, 2004%TheError = D.*(A.*Y-B.*U);if Transient == 1	TheError = TheError-D.*Ig-A.*Jh;endTheError = TheError./C./abs(A);if DC == 1 TheError(1) = TheError(1)/sqrt(2); endif Nyquist == 1 TheError(end) = TheError(end)/sqrt(2); endif LogDet == 1	NN = length(Y);	gT = exp(mean(log(C./D./(1+Gc.*B./A))));	if DC == 1 gT = gT/(C(1)/D(1)./(1+Gc(1).*B(1)./A(1)))^(1/(2*NN)); end	if Nyquist == 1 gT = gT/(C(end)/D(end)./(1+Gc(end).*B(end)./A(end)))^(1/(2*NN)); end	TheError = TheError*gT;endTheError = TheError(:);