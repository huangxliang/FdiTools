function [a, b, ig] = BJNormalise(a, b, ig, wscale, Transient);%%	[a, b, ig] = BJNormalise(a, b, ig, wscale, Transient);%%	output parameters%		a		=	normalised coefficients denominator polynomial plant model, dimension 1 x OrderA+1%		b		=	normalised coefficients numerator polynomial plant model, dimension 1 x OrderB+1%		ig		=	normalised initial cond. plant model, dimension 1 x OrderI+1%%	input parameters%		a				=	coefficients denominator polynomial plant model, dimension 1 x OrderA+1%		b				=	coefficients numerator polynomial plant model, dimension 1 x OrderB+1%		t				=	initial cond. plant model, dimension 1 x OrderI+1%		Transient		=	if Transient = 1 then transient polynomial Ig is estimated%		wscale			=	scaling angular frequency%% Rik Pintelon, 1998%MaxOrder = max([length(a),length(b),length(ig)])-1;for ii = 0:MaxOrder	Scale(ii+1) = wscale^ii;end% normalisation can also be applied when each row is another realisation[ra,ca] = size(a);[rb,cb] = size(b);[rig,cig] = size(ig);a = a.*repmat(Scale(1:ca),ra,1);b = b.*repmat(Scale(1:cb),rb,1);if Transient	ig = ig.*repmat(Scale(1:cig),rig,1);end