function Cnoise = Cov_NoiseParam(c, d, q, TheNoisePlane, LogDet, kuc, DC, Nyquist);%%	function Cnoise = Cov_NoiseParam(c, d, q, TheNoisePlane, LogDet, kuc, DC, Nyquist)%%	Calculation valid for circular complex distributed noise only.	%%	output parameters%		Cnoise			=	asymptotic covariance matrix of the noise model parameters (transient not included!)%							dimension:	(OrderC + OrderD) x (OrderC + OrderD)%										'z':		c(1) = d(1) = 1%										's', 'w':	c(end) = d(end) = 1%							NOW: VALID FOR OPEN LOOP BJ ONLY%%	input parameters%		c				=	coefficients numerator polynomial noise model, dimension 1 x OrderC%		d				=	coefficients denominator polynomial noise model, dimension 1 x OrderD%		q				=	vector of zk^-1 values, dimension: number of frequencies x 1%		TheNoisePlane	=	'z', 's', 'w' => discrete-time or continous-time noise model%		LogDet			=	1 if logdet(NoiseCovarianceMatrix) is present in loglikelihood; otherwise 0%		kuc				=	kurtosis factor of the pdf of the circular complex distributed noise (optional); default Gaussian%							It is related to the real kurtosis factor by kuc = (ku+1)/2%							Examples:%										ku = 3							for Gaussian noise%										ku = 9/5						for uniform noise%										ku = 9							for exponential noise%										ku = (8-3/4*pi^2)/(2-pi/2)^2	for Rayleigh noise%%		DC				=	1 if DC present otherwise 0%		Nyquist			=	1 if Nyquist frequency present otherwise 0%% Rik Pintelon, 1998% version April, 2004%%OrderC = length(c) - 1;OrderD = length(d) - 1;C = polyval(fliplr(c),q); C = C(:);D = polyval(fliplr(d),q); D = D(:);qMat = CalcBJOmegaMat(q, max(OrderC, OrderD));% if DC present modify qMatif DC == 1	qMat(1,:) = qMat(1,:)/sqrt(2);end;% if Nyquist present modify qMatif Nyquist == 1	qMat(end,:) = qMat(end,:)/sqrt(2);end;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% calculation uncertainty via Jacobian matrix  %% of the residuals evaluated in the true plant %% model parameters							   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%NN = length(q);% contribution parameters numerator noise modelif OrderC > 0	switch TheNoisePlane		case 'z', TheIndex = [2:OrderC+1];		case {'s','w'}, TheIndex = [1:OrderC];	end	dummy = -qMat(:,TheIndex)./repmat(C,1,length(TheIndex));	if LogDet == 1		dummy = dummy - repmat(mean(dummy,1),NN,1);	end	TheJacob = dummy;else	TheJacob = [];end% contribution parameters denominator noise modelif OrderD > 0	switch TheNoisePlane		case 'z', TheIndex = [2:OrderD+1];		case {'s','w'}, TheIndex = [1:OrderD];	end	dummy = qMat(:,TheIndex)./repmat(D,1,length(TheIndex));	if LogDet == 1		dummy = dummy - repmat(mean(dummy,1),NN,1);	end	TheJacob = [TheJacob dummy];endif (OrderC > 0) | (OrderD > 0)	TheJacob = 2*real(TheJacob);	[u,s,v] = svd(TheJacob,0);	Cnoise = (kuc-1)*v*diag(diag(s).^(-2))*v.';else	Cnoise = [];end