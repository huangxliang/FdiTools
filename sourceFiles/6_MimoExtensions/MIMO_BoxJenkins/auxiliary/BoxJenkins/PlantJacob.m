function TheJacob = PlantJacob(Y, U, sMat, SelA, SelB, OrderI, Transient, DC, Nyquist);%%      TheJacob = PlantJacob(Y, U, sMat, SelA, SelB, OrderI, Transient, DC, Nyquist);%% calculates the jacobian matrix w.r.t. the plant and transient model parameters%% output parameters% 	TheJacob 		=	jacobian matrix, dimensions number of frequencies x number of parameters%% input parameters%		Y			=	DFT spectrum output signal, dimensions: number of frequencies x 1%		U			=	DFT spectrum input signal, dimensions: number of frequencies x 1%		sMat		=	table of powers of (jwk^r) or (zk^-r)%		SelA		=	selects the unknown coefficients of the A-polynomial; known coeff. are zero%		SelB		=	selects the unknown coefficients of the B-polynomial; known coeff. are zero%		OrderI		=	order initial condition polynomial plant model%		Transient	=	if Transient = 1 then transient polynomial T1 is estimated%		DC			=	1 if DC present otherwise 0%		Nyquist		=	1 if Nyquist frequency present otherwise 0%% contribution parameters denominator plant modeldummy = Y;if DC == 1 dummy(1) = dummy(1)/sqrt(2); endif Nyquist == 1 dummy(length(dummy)) = dummy(length(dummy))/sqrt(2); endTheJacob = sMat(:,SelA==1).*repmat(dummy,1,sum(SelA));% contribution parameters numerator plant modeldummy = -U;if DC == 1 dummy(1) = dummy(1)/sqrt(2); endif Nyquist == 1 dummy(length(dummy)) = dummy(length(dummy))/sqrt(2); endTheJacob = [TheJacob sMat(:,SelB==1).*repmat(dummy,1,sum(SelB))];% contribution initial condition polynomialif Transient == 1	dummy = -ones(size(U));	if DC == 1 dummy(1) = dummy(1)/sqrt(2); end	if Nyquist == 1 dummy(length(dummy)) = dummy(length(dummy))/sqrt(2); end	TheJacob = [TheJacob sMat(:,1:OrderI+1).*repmat(dummy,1,OrderI+1)];end;