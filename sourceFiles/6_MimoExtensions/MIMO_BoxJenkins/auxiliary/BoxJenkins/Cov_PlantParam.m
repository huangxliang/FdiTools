function Cplant = Cov_PlantParam(U, s, q, ThePlantPlane, a, b, c, d, s2, SelA, SelB, DC, Nyquist);%%	Cplant = Cov_PlantParam(U, s, q, ThePlantPlane, a, b, c, d, s2, SelA, SelB, DC, Nyquist);%%	output parameters%		Cplant	=	covariance matrix of the scaled (normalised) plant model parameters Cov([a, b].')%					(a, b coefficients A, B polynomials). The scaling is such that%					DT-model: a(1) = 1;%					CT-model: a(end) = 1.%					NOW: VALID FOR OPEN LOOP BJ ONLY%%	input parameters%		Y				=	DFT spectrum output signal, dimensions: number of frequencies x 1%		U				=	DFT spectrum input signal, dimensions: number of frequencies x 1%		s				=	vector of (zk^-1) or (jwk) values, dimension: number of frequencies x 1%		q				=	vector of (zk^-1) values, dimension: number of frequencies x 1%		ThePlantPlane	=	'z', 's', 'w' => discrete-time or continous-time noise model%		a				=	estimate coefficients denominator polynomial plant model, dimension 1 x OrderC%		b				=	estimate coefficients numerator polynomial plant model, dimension 1 x OrderD%		ig				=	estimate initial conditions plant model, dimensions: OrderI+1 x 1%		c				=	estimate coefficients numerator polynomial noise model, dimension 1 x OrderC+1%		d				=	estimate coefficients denominator polynomial noise model, dimension 1 x OrderB+1%		jh				=	estimate initial conditions noise model, dimension number of 1 x OrderJ+1%		s2				=	estimate of the variance of the white noise source%		SelA			=	if 1 then coeff. A-polynomial is unknown; if zero the coeff. is known equal to zero%		SelB			=	if 1 then coeff. B-polynomial is unknown; if zero the coeff. is known equal to zero%		DC				=	1 if DC present otherwise 0%		Nyquist			=	1 if Nyquist frequency present otherwise 0%% Rik Pintelon, 1998% version April, 2004%%% polynomial in 'z' or 's', 'w' domains must be monicswitch ThePlantPlane	case {'s','w'}, SelA(end) = 0;	case 'z', SelA(1) = 0;end%%%%%%%%%%%%%%%%%%%%%%%%%% calculate plant model %%%%%%%%%%%%%%%%%%%%%%%%%%s = s(:);q = q(:);U = U(:);A = polyval(fliplr(a),s);B = polyval(fliplr(b),s);%%%%%%%%%%%%%%%%%%%%%%%%%% calculate noise model %%%%%%%%%%%%%%%%%%%%%%%%%%C = polyval(fliplr(c),q);D = polyval(fliplr(d),q);OrderB = length(b) - 1;OrderA = length(a) - 1;sMat = CalcBJOmegaMat(s, max(OrderB, OrderA));sumA = sum(SelA);sumB = sum(SelB);% derivative w.r.t. denominator coefficientsdummy = U.*D./C.*B./(A.^2);if DC == 1 dummy(1) = dummy(1)/sqrt(2); endif Nyquist == 1 dummy(end) = dummy(end)/sqrt(2); endP = sMat(:,SelA == 1).*repmat(dummy, 1, sumA);% derivative w.r.t. numerator coefficientsdummy = -U.*D./C./A;if DC == 1 dummy(1) = dummy(1)/sqrt(2); endif Nyquist == 1 dummy(end) = dummy(end)/sqrt(2); endP = sqrt(2)*[P sMat(:,SelB == 1).*repmat(dummy, 1, sumB)];[u,ss,v] = svd([real(P);imag(P)], 0);% diags = diag(ss);% diags = diags(1:end-1);% Cplant = s2*v*diag([diags.^(-2);0])*v.';Cplant = s2*v*diag(diag(ss).^(-2))*v.';