function [a, b, ig, Cost, smax, smin] = PlantLeastSquare(Y, U, s, sMat, SelA, SelB, OrderI, Transient, DC, Nyquist);%%	[a, b, ig, Cost, smax, smin] = PlantLeastSquare(Y, U, s, sMat, SelA, SelB, OrderI, Transient, DC, Nyquist);%%	output parameters%		a		=	new estimate coefficients denominator polynomial plant model, dimension 1 x OrderA+1%		b		=	new estimate coefficients numerator polynomial plant model, dimension 1 x OrderB+1%		ig		=	new estimate initial conditions plant model, dimension 1 x OrderI+1%		Cost	=	value of the cost function in the last iteration step%		smax	=	largest singular value of the Jacobian matrix%		smin	=	smallest singular value of the Jacobian matrix%%	input parameters%		Y			=	DFT spectrum output signal, dimensions: number of frequencies x 1%		U			=	DFT spectrum input signal, dimensions: number of frequencies x 1%		s			=	vector of (zk^-1) or (jwk) values, dimension: number of frequencies x 1%		sMat		=	table of powers of (jwk) or (zk^-r), dimension: number of freq. x maxorder%		SelA		=	if 1 then coeff. A-polynomial is unknown; if zero the coeff. is known equal to zero%		SelB		=	if 1 then coeff. B-polynomial is unknown; if zero the coeff. is known equal to zero%		OrderI		=	order initial condition polynomial plant model%		Transient	=	if Transient = 1 then transient polynomial T1 is estimated%		DC			=	1 if DC present otherwise 0%		Nyquist		=	1 if Nyquist frequency present otherwise 0%% Rik Pintelon, 1998%Jacob = PlantJacob(Y, U, sMat, SelA, SelB, OrderI, Transient, DC, Nyquist);[u,ss,v] = svd([real(Jacob);imag(Jacob)], 0);sumA = sum(SelA);sumB = sum(SelB);if ~((sumA == 0) & (sumB == 0))	dim = length(diag(ss));	smax = ss(1,1);	smin = ss(dim-1, dim-1);end;Param = v(:,dim);a = zeros(1,length(SelA));a(SelA==1) = Param(1:sumA).';b = zeros(1,length(SelB));b(SelB==1) = Param(sumA+1:sumA+sumB).';if Transient == 1	ig = Param(sumA+sumB+1:sumA+sumB+OrderI+1).';else	ig = [];end;	Cost = PlantCost(Y, U, a, b, ig, s, Transient, DC, Nyquist);