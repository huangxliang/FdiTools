function TheCost = BJCost(Y, U, a, b, ig, c, d, jh, s, q, Gc, Transient, LogDet, DC, Nyquist);%%	TheCost = BJCost(Y, U, a, b, ig, c, d, jh, s, q, Gc, Transient, LogDet, DC, Nyquist); %% Calculates the cost function for identifying plant models with arb. signals%% output arguments%   TheCost 	= value cost function%% input arguments%   Y			=	DFT spectrum output signal%   U			=	DFT spectrum input signal%	a			=	coefficients numerator plant model, dimensions: OrderA+1 x 1%	b			=	coefficients denominator plant model, dimensions: OrderB+1 x 1%	ig			=	coefficients initial conditions polynomial T, dimensions: OrderI+1 x 1%	c			=	coefficients denominator noise model, dimensions: OrderC+1 x 1%	d			=	coefficients denominator noise model, dimensions: OrderD+1 x 1%	jh			=	coefficients initial conditions polynomial T, dimensions: OrderJ+1 x 1%	s			=	vector of (jwk) or (zk^-1) values, dimension: number of frequencies x 1%	Gc			=	controller transfer function, zero or empty if unknown or not present%	Transient	=	if Transient = 1 then initial conditions plant and/or noise are estimated%	LogDet		=	1 if logdet(NoiseCovarianceMatrix) is present in likelihood; otherwise 0%	DC			=	1 if DC present otherwise 0%	Nyquist		=	1 if Nyquist frequency present otherwise 0%% Rik Pintelon, 1998% version April, 2004%% calculate plant modelA = polyval(fliplr(a),s);B = polyval(fliplr(b),s);if Transient == 1	Ig = polyval(fliplr(ig),s);else	Ig = [];end;% calculate noise modelC = polyval(fliplr(c),q);D = polyval(fliplr(d),q);if Transient == 1	Jh = polyval(fliplr(jh),q);else	Jh = [];end;Error = BJError(Y, U, A, B, Ig, C, D, Jh, Gc, Transient, LogDet, DC, Nyquist);TheCost = real(Error'*Error);