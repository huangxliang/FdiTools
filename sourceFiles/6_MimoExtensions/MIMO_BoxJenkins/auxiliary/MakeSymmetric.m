function ThetaC = MakeSymmetric(ThetaC);%% function ThetaC = MakeSymmetric(ThetaC);%%	Rotate the polynomial matrix to make it as symmetric as possible,%%	Output parameter%%		ThetaC	=	ny x ny x (nc+1) matrix; coefficients of the ny x ny polynomial matrix C%%	Input parameter%%		ThetaC	=	see output parameter%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, January 2005 % All rights reserved.% Software can be used freely for non-commercial applications only.%ny = size(ThetaC, 1);nc = size(ThetaC, 3) - 1;J = zeros(ny^2, ny^2);					% transformation matrix between vec(T.') and vec(T)ll = 0;for ii = 1:ny							% row index	for jj = 1:ny						% column index		lij = ii + ny*(jj-1);		ll = ll + 1;		J(ll,lij) = 1;	end % column index iiend % row index jjMat = [];for ll = 1:nc+1	Mat = [Mat; kron(eye(ny), squeeze(ThetaC(:,:,ll))) - kron(squeeze(ThetaC(:,:,ll)), eye(ny))*J];end % ll[u, s, v] = svd(Mat, 0);% check whether the original matrix polynomial is diagonals1 = diag(s);s1 = s1(end-2:end)/s1(1);if (sum(s1)/eps <= 100*ny^2)	DiagonalC = 1;else	DiagonalC = 0;endif ~DiagonalC	T = reshape(v(:,end), ny, ny);	for ll = 1:nc+1		% if the original matrix is perfectly symmetric then ThetaC calculated below is symmetric		ThetaC(:,:,ll) = squeeze(ThetaC(:,:,ll)) * T;	end % llend % if not diagonal C% normalise the C-matrixThetaC = ThetaC/norm(ThetaC(:));