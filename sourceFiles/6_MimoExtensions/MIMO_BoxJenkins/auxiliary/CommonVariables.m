function [TheSel, Theta0, ModelVar] = CommonVariables(TheSel, Theta0, ModelVar);%% function [TheSel, Theta0, ModelVar] = CommonVariables(TheSel, Theta0, ModelVar);%%	Imposes the common variable structure for reciprocal or/and ARMAX model structures%%	Output parameter%%		TheSel				=	see input parameter%		Theta0				=	see input parameter%%%	Input parameter%%		TheSel				=	structure with fields 'A', 'B', 'Ig', 'C', 'D', 'Ih'%									TheSel = struct('A',[],'B',[], 'Ig', [], 'C',[],'D',[], 'Ih', [])%									TheSel.A = 1 x (OrderA+1)%										TheSel.A(r) = 1 if coeff. a(r-1) is unknown%										TheSel.A(r) = 0 if coeff. a(r-1) = 0%									TheSel.B = ny x nu x (OrderB+1)%										TheSel.B(i,j,r) = 1 if coeff. b(i,j,r-1) is unknown%										TheSel.B(i,j,r) = 0 if coeff. b(i,j,r-1) = 0%									TheSel.Ig = ny x (OrderIg+1)%										TheSel.Ig(i,r) = 1 if coeff. ig(i,r-1) is unknown%										TheSel.Ig(i,r) = 0 if coeff. ig(i,r-1) = 0%									TheSel.C = ny x ny x (OrderC+1)%										TheSel.C(i,j,r) = 1 if coeff. c(i,j,r-1) is unknown%										TheSel.C(i,j,r) = 0 if coeff. c(i,j,r-1) = 0%									TheSel.D = 1 x (OrderD+1)%										TheSel.D(r) = 1 if coeff. d(i,j,r-1) is unknown%										TheSel.D(r) = 0 if coeff. d(i,j,r-1) = 0%									TheSel.Ih = ny x (OrderIh+1)%										TheSel.Ih(i,r) = 1 if coeff. ih(i,r-1) is unknown%										TheSel.Ih(i,r) = 0 if coeff. ih(i,r-1) = 0%		Theta0				=	starting value plant, noise, and initial conditions parameters%								structure with fields 'A', 'B', 'Ig', 'C', 'D', 'Ih'%									Theta0 = struct('A',[],'B',[], 'Ig', [], 'C',[],'D',[], 'Ih', [])%									Theta0.A = 1 x (OrderA+1)%										Theta0.A(r) = coefficient a(r-1) of Omega^(r-1) %									Theta0.B = ny x nu x (OrderB+1)%										Theta0.B(i,j,r) = coefficient b(i,j,r-1) of Omega^(r-1)%									Theta0.Ig = ny x (OrderIg+1)%										Theta0.Ig(i,r) = coefficient ig(i,r-1) of Omega^(r-1) %									Theta0.C = ny x ny x (OrderA+1)%										Theta0.C(i,j,r) = coefficient c(i,j,r-1) of Omega^(r-1) %									Theta0.D = 1 x (OrderD+1)%										Theta0.D(r) = coefficient d(r-1) of Omega^(r-1)%									Theta0.Ih = ny x (OrderIh+1)%										Theta0.Ih(i,r) = coefficient ih(i,r-1) of Omega^(r-1)%		ModelVar			=	contains the information about the model to be identified%								structure with fields 'Transient', 'ThePlane', 'TheModel', 'Reciprocal'%									ModelVar = struct('Transient', [], 'PlantPlane', [], 'NoisePlane', [], 'Struct', [], 'Reciprocal',[])%									ModelVar.Transient		=	1 then the initial conditions of the plant and/or noise are estimated%									ModelVar.PlantPlane		=	plane of the plant model%																	's':	continuous-time;%																	'w':	sqrt(s)-domain%																	'z':	discrete-time;%																	'':		plane not defined%									ModelVar.NoisePlane		=	plane of the plant model%																	's':	continuous-time;%																	'w':	sqrt(s)-domain%																	'z':	discrete-time;%																	'':		plane not defined%									ModelVar.Struct			=	model structure%																	'BJ':		Box-Jenkins%																	'OE':		output error (plant model only)%																	'ARMA':		autoregressive moving average (noise model only)%																	'ARMAX':	autoregressive moving average with exogenous input%									ModelVar.Reciprocal		=	1 if plant and noise models are reciprocal: G(i,j) = G(j,i) and H(i,j) = H(j,i)%%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, December 2004 % All rights reserved.% Software can be used freely for non-commercial applications only.%if ModelVar.Reciprocal		ny = ModelVar.ny;	nu = ModelVar.nu;	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	% imposes the common plant model parameter structure for the reciprocal case %	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		if ~strcmp(ModelVar.Struct, 'ARMA')			for jj = 1:nu							% colom index			for ii = 1+jj:ny					% row index				lji = jj + ny*(ii-1);			% block position coefficients b(jj,ii) polynomial						% reciprocity plant model						if lji <= nu*ny					% test for rectangular matrices					TheSel.B(jj,ii,:) = zeros(size(TheSel.B(jj,ii,:)));					Theta0.B(jj,ii,:) = Theta0.B(ii,jj,:);				end % if								end % ii		end % jj	end % if not ARMA		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	% imposes the common noise model parameter structure for the reciprocal case %	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		if ~strcmp(ModelVar.Struct, 'OE')				for jj = 1:ny							% colom index			for ii = 1+jj:ny					% row index							% reciprocity noise model				TheSel.C(jj,ii,:) = zeros(size(TheSel.C(jj,ii,:)));				Theta0.C(jj,ii,:) = Theta0.C(ii,jj,:);							end % ii		end % jj	end % if not OEend % if ModelVar.Reciprocalif strcmp(ModelVar.Struct,'ARMAX')		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	% impose common poles of plant and noise model %	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		TheSel.D = zeros(size(TheSel.A));	Theta0.D = Theta0.A;	ModelVar.nd = ModelVar.na;	end % if strcmp