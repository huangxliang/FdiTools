function [Jacob, Error] = LeftWeighting(Jacob, Error, CovE);%% function [Jacob, Error] = LeftWeighting(Jacob, Error, CovE);%%	1. left weighting with the inverse of the square root of CovE%	2. putting the different frequency contributions on top of%	   each other%%	Output parameters%%		Jacob	=	CovE^(-1/2) * Jacob, size: ny*F x ntheta%		Error	=	CovE^(-1/2) * Error, size: ny*F x 1%%	Input parameters%%		Jacob	=	derivative prediction error w.r.t. model parameters, size: ny x ntheta x F%		Error	=	prediction error, size: ny x F%		CovE	=	sample covariance matrix prediction error%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, December 2004 % All rights reserved.% Software can be used freely for non-commercial applications only.% Version April 2005%% inverse of a symmetric square root of the real valued CovE[u, s, v] = svd(CovE, 0);L = u*diag(diag(s).^(-0.5))*u.';% left weighting Error + stacking the frequency contributions on top of each otherError = L*Error;Error = Error(:);% left weighting Jacob[ny, ntheta, F] = size(Jacob); Jacob = permute(Jacob, [1,3,2]);ntheta = size(Jacob,3);for ii = 1:ntheta	Jacob(:,:,ii) = L*Jacob(:,:,ii);end % ii% stacking the frequency contributions on top of each other% application of the formula [n, m, k] = size(A); reshape(permute(A,[1,3,2]),n*k,m)% taking into account that indices 2 and 3 have already been permutedJacob = reshape(Jacob, ny*F, ntheta);