function TheJacob = Add_SelectColumns(TheJacob, TheSel, ModelVar);%% function TheJacob = Add_SelectColumns(TheJacob, TheSel, ModelVar);%%	Imposes the common parameter structure (reciprocal or/and ARMAX) by%	adding the appropriate columns, and selects the columns of the %	Jacobian matrix corresponding to the parameters to be estimated%%	Output parameter%%		TheJacob			=	Jacobian matrix after imposing the common parameter structure,%								all other parameters (except those who are zero) are free%								size: ny * number of freq. x number of parameters%%	Input parameter%%		TheJacob			=	Jacobian matrix before imposing the common parameter structure:%								all parameters (even those who are zero) are free%								size: ny * number of freq. x number of parameters%		TheSel				=	structure with fields 'A', 'B', 'Ig', 'C', 'D', 'Ih'%									TheSel = struct('A',[],'B',[], 'Ig', [], 'C',[],'D',[], 'Ih', [])%									TheSel.A = 1 x (OrderA+1)%										TheSel.A(r) = 1 if coeff. a(r-1) is unknown%										Sel.A(r) = 0 if coeff. a(r-1) = 0%									TheSel.B = ny x nu x (OrderB+1)%										TheSel.B(i,j,r) = 1 if coeff. b(i,j,r-1) is unknown%										TheSel.B(i,j,r) = 0 if coeff. b(i,j,r-1) = 0%									TheSel.Ig = ny x (OrderIg+1)%										TheSel.Ig(i,r) = 1 if coeff. ig(i,r-1) is unknown%										TheSel.Ig(i,r) = 0 if coeff. ig(i,r-1) = 0%									TheSel.C = ny x ny x (OrderC+1)%										TheSel.C(i,j,r) = 1 if coeff. c(i,j,r-1) is unknown%										TheSel.C(i,j,r) = 0 if coeff. c(i,j,r-1) = 0%									TheSel.D = 1 x (OrderD+1)%										TheSel.D(r) = 1 if coeff. d(r-1) is unknown%										TheSel.D(r) = 0 if coeff. d(r-1) = 0%									TheSel.Ih = ny x (OrderIh+1)%										TheSel.Ih(i,r) = 1 if coeff. ih(i,r-1) is unknown%										TheSel.Ih(i,r) = 0 if coeff. ih(i,r-1) = 0%		ModelVar			=	contains the information about the model to be identified%									ModelVar.Transient		=	1 then the initial conditions of the plant and/or noise are estimated%									ModelVar.PlantPlane		=	plane of the plant model%																	's':	continuous-time;%																	'w':	sqrt(s)-domain%																	'z':	discrete-time;%																	'':		plane not defined%									ModelVar.NoisePlane		=	plane of the plant model%																	's':	continuous-time;%																	'w':	sqrt(s)-domain%																	'z':	discrete-time;%																	'':		plane not defined%									ModelVar.Struct			=	model structure%																	'BJ':		Box-Jenkins%																	'OE':		output error (plant model only)%																	'ARMA':		autoregressive moving average (noise model only)%																	'ARMAX':	autoregressive moving average with exogenous input%									ModelVar.RecipPlant		=	1 if plant model is reciprocal: G(i,j) = G(j,i)%									ModelVar.RecipNoise		=	1 if noise model is reciprocal: H(i,j) = H(j,i)%									ModelVar.nu				=	number of inputs%									ModelVar.ny				=	number of outputs%									ModelVar.na				=	order polynomial A%									ModelVar.nb				=	order matrix polynomial B%									ModelVar.nig			=	order vector polynomial Ig%									ModelVar.nc				=	order matrix polynomial C%									ModelVar.nd				=	order polynomial D%									ModelVar.nih			=	order vector polynomial Ih%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, December 2004 % All rights reserved.% Software can be used freely for non-commercial applications only.%% order polynomialsna = ModelVar.na;nb = ModelVar.nb;nig = ModelVar.nig;nc = ModelVar.nc;nd = ModelVar.nd;nih = ModelVar.nih;% inputs and outputsnu = ModelVar.nu;ny = ModelVar.ny;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% summing columns Jacobian matrix in case of a reciprocal model structure %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	%%%%%%%%%%%%%%%%%%%%%%%%%%%% reciprocity plant model %%%%%%%%%%%%%%%%%%%%%%%%%%%%if ModelVar.RecipPlant		if ~(strcmp(ModelVar.Struct, 'ARMA') | strcmp(ModelVar.Struct, 'ARMASTART'))			start = (na+1) + 1;								% ofset for coefficients A polynomial			for jj = 1:nu									% column index			for ii = 1+jj:ny							% row index				lij = ii + ny*(jj-1);					% block position coefficients b(ii,jj) polynomial				lji = jj + ny*(ii-1);					% block position coefficients b(jj,ii) polynomial								if lji <= nu*ny							% test for rectangular matrices					startij = start + (lij-1)*(nb+1);					stopij = start + lij*(nb+1) - 1 ;					startji = start + (lji-1)*(nb+1);					stopji = start + lji*(nb+1) - 1 ;					TheJacob(:, startij:stopij) = TheJacob(:, startij:stopij) + TheJacob(:, startji:stopji);				end % if							end % ii		end % jj	end % not ARMAend % if reciprocal plant model	%%%%%%%%%%%%%%%%%%%%%%%%%%%% reciprocity noise model %%%%%%%%%%%%%%%%%%%%%%%%%%%%if ModelVar.RecipNoise		if ~strcmp(ModelVar.Struct, 'OE')			start = (na+1) + (nb+1)*nu*ny + (nig+1)*ny + 1;	% ofset for coefficients A, B, Ig polynomials			for jj = 1:ny									% column index			for ii = 1+jj:ny							% row index				lij = ii + ny*(jj-1);					% block position coefficients c(ii,jj) polynomial				lji = jj + ny*(ii-1);					% block position coefficients c(jj,ii) polynomial								startij = start + (lij-1)*(nc+1);				stopij = start + lij*(nc+1) - 1 ;				startji = start + (lji-1)*(nc+1);				stopji = start + lji*(nc+1) - 1 ;				TheJacob(:, startij:stopij) = TheJacob(:, startij:stopij) + TheJacob(:, startji:stopji);							end % ii		end % jj	end % not OE	end % if reciprocal noise model%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% summing columns Jacobian matrix in case of an ARMAX model structure %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if strcmp(ModelVar.Struct,'ARMAX')		start = (na+1) + (nb+1)*ny*nu + (nig+1)*ny + (nc+1)*ny^2 + 1;		% ofset for coefficients A, B, Ig, C polynomials	stop = start + nd;	TheJacob(:, 1:na+1) = TheJacob(:, 1:na+1) + TheJacob(:, start:stop);	end % if ARMAX%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% create row vector that selects the columns of the Jacobian %% matrix corresponding to the parameters to be estimated 	 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% A polynomialSelect = TheSel.A;% B ny x nu matrix polynomial% for jj = 1:nu% 	for ii = 1:ny% 		Select = [Select, squeeze(TheSel.B(ii,jj,:)).'];% 	end % ii% end % jjSelB = permute(TheSel.B,[3, 1, 2]);     %  reason: vec(B) is calculated as: vecB = permute(B, [3, 1, 2]); vecB = vecB(:);Select = [Select, SelB(:).'];% Ig ny x 1 vector polynomial% for ii = 1:ny% 	Select = [Select, TheSel.Ig(ii,:)];% end % iiSelIg = TheSel.Ig.';Select = [Select, SelIg(:).'];% C ny x ny matrix polynomial% for jj = 1:ny% 	for ii = 1:ny% 		Select = [Select, squeeze(TheSel.C(ii,jj,:)).'];% 	end % ii% end % jjSelC = permute(TheSel.C,[3,1,2]);       %  reason: vec(C) is calculated as: vecC = permute(C, [3, 1, 2]); vecC = vecC(:);Select = [Select, SelC(:).'];% D polynomialSelect = [Select, TheSel.D];% Ih ny x 1 vector polynomial% for ii = 1:ny% 	Select = [Select, TheSel.Ih(ii,:)];% end % iiSelIh = TheSel.Ih.';Select = [Select, SelIh(:).'];%%%%%%%%%%%%%%%%%%%%%%%%%%%% selection columns Jacob %%%%%%%%%%%%%%%%%%%%%%%%%%%%TheJacob = TheJacob(:, Select == 1);