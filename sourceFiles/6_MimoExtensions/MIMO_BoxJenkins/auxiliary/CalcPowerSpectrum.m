function S = CalcPowerSpectrum(PolyTrans, CovE);%% function S = CalcPowerSpectrum(PolyTrans, CovE);%%	Calculates the noise power spectrum H * CovE * H'%%	Output parameter%%		S			=	H * CovE * H', size: ny x ny x number of freq.%%	Input parameters%%		PolyTrans	=	structure containing the polynomials and transfer functions evaluated in x%							PolyTrans.A		=	denominator polynomial plant transfer function evaluated in x.Plant, dimensions 1 x number of freq.%							PolyTrans.D		=	D polynomial evaluated in x.Noise, dimensions 1 x number of freq.%							PolyTrans.G		=	plant transfer matrix evaluated in x.Plant, dimensions ny x nu x number of freq.%							PolyTrans.Hinv	=	inverse of the noise transfer matrix evaluated in x.Noise, dimensions ny x ny x number of freq.%							PolyTrans.Tg	=	plant transient term evaluated in x.Plant, dimension ny x number of freq.%							PolyTrans.Th	=	noise transient term evaluated in x.Plant, dimension ny x number of freq.%		CovE		=	estimate of the covariance of the ny x 1 white noise source, dimension ny x ny%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, December 2004 % All rights reserved.% Software can be used freely for non-commercial applications only.%H = PolyTrans.H;ny = size(H,1);F = size(H,3);S = zeros(ny,ny,F);for kk = 1:F	S(:,:,kk) = H(:,:,kk) * CovE * H(:,:,kk)';	% remove small imaginary parts on the main diagonal	S(:,:,kk) = S(:,:,kk) - diag(sqrt(-1)*imag(diag(S(:,:,kk))));end % frequencies kk