function [TheCost, CovE] = MIMOCost(data, Theta, x);%%	[TheCost, CovE] = MIMOCost(data, Theta, x); %% Calculates the cost function for identifying plant models with arb. signals%%	Output arguments%%		TheCost 	=	value cost function%       CovE        =   real valued covariance matrix of the ny x 1 driving noise source %%%	Input arguments%%		data		=	structure containing the non-patameteric data%							data.Y			=	DFT spectrum ny x 1 output signal, dimensions ny x number of frequencies%							data.U			=	DFT spectrum nu x 1 input signal, dimensions: nu x number of frequencies%							data.freq		=	vector of frequency values (Hz), dimension: number of frequencies x 1%							data.Ts			=	sampling time (s)%							data.Gc			=	controller transfer function, zero or empty if unknown or not present,%												dimension nu x ny x number of frequencies%							data.DC			=	1 if DC present otherwise 0%							data.Nyquist	=	1 if Nyquist frequency present otherwise 0%%		Theta		=	estimated value plant, noise, and initial conditions parameters%						structure with fields 'A', 'B', 'Ig', 'C', 'D', 'Ih'%							Theta = struct('A', [], 'B', [], 'Ig', [], 'C', [],' D', [], 'Ih', [])%							Theta.A = 1 x (OrderA+1)%								Theta.A(r) = coefficient a(r-1) of Omega^(r-1) %							Theta.B = ny x nu x (OrderB+1)%								Theta.B(i,j,r) = coefficient b(i,j,r-1) of Omega^(r-1)%							Theta.Ig = ny x (OrderIg+1)%								Theta.Ig(i,r) = coefficient ig(i,r-1) of Omega^(r-1) %							Theta.C = ny x ny x (OrderA+1)%								Theta.C(i,j,r) = coefficient c(i,j,r-1) of Omega^(r-1) %							Theta.D = 1 x (OrderD+1)%								Theta.D(r) = coefficient d(r-1) of Omega^(r-1)%							Theta.Ih = ny x (OrderIh+1)%								Theta.Ih(i,r) = coefficient ih(i,r-1) of Omega^(r-1)%%		x			=	structure containing (jwk) or (zk^-1) values%							x.Plant	=	plant model, dimension: number of frequencies x 1%							x.Noise	=	noise model, dimension: number of frequencies x 1%%% Copyright (c) Rik Pintelon, Vrije Universiteit Brussel - dept. ELEC, December 2004 % All rights reserved.% Software can be used freely for non-commercial applications only.% Version April 2005%% transfer functions and polynomialsPolyTrans = CalcPolyTrans(Theta, x);% prediction Error, sample covariance matrix CovE of% the prediction error, and scale factor gF[Error, CovE, gF] = PredError(data, PolyTrans);% cost functionTheCost = det(CovE*abs(gF.^2));