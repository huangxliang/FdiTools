%% Discrete-time or continuous-time OE modeling starting from frequency domain data.% This example uses the "MIMO_MaximumLikelihood" toolbox%% Rik Pintelon, 14 October 2011%clear allclose all%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Definition simulation parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%N = 5000;               % number of time domain samplesPlantPlane = 'z';       % discrete-time plantPlantPlane = 's';       % continuous-time plantRecipPlant = 0;         % if 1 then reciprocal plant transfer functionstde = 0.01;            % standard deviation output noiseTs = 1/5.5;             % sampling periodfs = 1/Ts;              % sampling frequencyfmin = 0.1;     % begin frequency band of interestfmax = 2;       % end frequency band of interest% selection of the corresponding DFT linesSelect = [floor(fmin/(fs/N))+1:1:floor(fmax/(fs/N))+1].';	% select from fmin to fmaxF = length(Select);                                         % number of frequencies in the frequency band of interestSelectAll = [1:1:N+1].';                                    % from DC to Nyquist on 2*N points for s-domainfreq = (Select-1)*fs/N;                                     % frequencies selected DFT linesfreqAll = ((SelectAll-1)/(2*N)/Ts);                         % frequencies all DFT linesif PlantPlane == 's'    sAll = sqrt(-1)*2*pi*freqAll;end % if s-domainnu = 2;                 % number of inputsny = 3;                 % number of outputs%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Definition plant model transfer function %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%switch PlantPlane    case 'z'	b0 = rand(ny, ny, 5);	% chebychev polynomial for noise model	[b110, a0] = cheby1(4, 3, 0.5);    case 's'	b0 = rand(ny, ny, 3);	% inverse chebychev polynomial for plant	[b110, a0] = cheby2(3, 40, 2*pi,'s');	b110 = fliplr(b110(2:end));	b110(2) = 5e-4;	a0 = fliplr(a0);	b0(1,1,:) = b110;	b0(2,2,:) = fliplr([a0(1) 2e-4 2e-3]);	b0(3,3,:) = fliplr([2e-3 a0(1) 2e-4]);	b0(3,2,:) = fliplr([5e-3 5e-4 a0(1)]);end % switchna = length(a0) - 1;nb = size(b0,3) - 1;nc = 0;nd = 0;% if reciprocal == 1 then make plant transfer function reciprocalif RecipPlant	for ll = 1:nb+1		b0(:,:,ll) = b0(:,:,ll) + b0(:,:,ll).';	endend% create the structures required for the MIMO_BoxJenkins function[Sel, Theta0, ModelVar, IterVar] = DefaultValues(na, nb, [], [], nu, ny, PlantPlane, [], 'OE', RecipPlant);% s-domain: plant transient term needs a higher orderif PlantPlane == 's'    nig = 4;    ModelVar.nig = nig;    Sel.Ig = ones(ny, nig+1);    Theta0.Ig = zeros(ny, nig+1);end % if s-domain% true parameter values (except the plant transient parameters)Theta0.A = a0;for ii = 1:ny	for jj = 1:nu		Theta0.B(ii,jj,:) = b0(ii,jj,:);	end % jjend % ii%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Calculation noisy outputs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%switch PlantPlane    case 'z'                % calculation of N samples of the time domain response        u = randn(nu, N);        y0 = zeros(ny, N);        for jj=1:ny            for ii=1:nu                y0(jj,:) = y0(jj,:) + filter(squeeze(b0(jj,ii,:)),a0,u(ii,:));            end % ii        end % jj        e = randn(ny, N)*stde;        Te = fliplr(hankel(ones(ny,1)));        e = Te*e;        y = y0 + e;            case 's'                % calculation 2*N samples time response via the frequency domain        u = randn(nu, 2*N);        U = fft(u,[],2);        Y0 = zeros(ny, length(SelectAll));        for jj=1:ny            for ii=1:nu                Y0(jj,:) = Y0(jj,:) + ((polyval(fliplr(squeeze(b0(jj,ii,:)).'),sAll)./polyval(fliplr(a0),sAll)).').*U(ii,SelectAll);            end % ii        end % jj        y0 = 2*real(ifft([zeros(ny,1),Y0(:,2:end-1),zeros(ny,N)],[],2));        u = u(:,1:N);        y0 = y0(:,1:N);        e = randn(ny, N)*stde;        y = y0 + e;       end % switch%%%%%%%%%%%%%%%%%%%%%%%%%%%% Data for identification %%%%%%%%%%%%%%%%%%%%%%%%%%%%% Selection of the frequency band of interestU = fft(u,[],2)/sqrt(N);Y = fft(y,[],2)/sqrt(N);U = U(:, Select);Y = Y(:, Select);% filling out the data structure data.U = U;data.Y = Y;data.freq = freq;data.Ts = Ts;%%%%%%%%%%%%%%%%%%%% Starting values % %%%%%%%%%%%%%%%%%%%% starting value = total least squares estimate [ThetaWTLS, smax, smin, wscale] = MIMO_WTLS(data, Sel, ModelVar);%%%%%%%%%%%%%%%%%% ML estimation %%%%%%%%%%%%%%%%%%[Theta, Cost, smax, smin, wscale] = MIMO_BoxJenkins(data, Sel, ThetaWTLS, ModelVar, IterVar);%%%%%%%%%%%%%%%%%%%%%%%%%%% Cramer-Rao lower bound %%%%%%%%%%%%%%%%%%%%%%%%%%%[CRbound, Theta, CovThetan, Thetan, Seln, wscale, TheCond] = MIMO_CR_bound(data, Sel, Theta, ModelVar);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Calculation true, estimated plant transfer functions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%switch ModelVar.PlantPlane	case 'z', x.Plant = exp(-sqrt(-1)*2*pi*freq*Ts);	case 's', x.Plant = sqrt(-1)*2*pi*freq;endx.Noise = ones(size(x.Plant));PolyTrans0 = CalcPolyTrans(Theta0, x);PolyTrans = CalcPolyTrans(Theta, x);%%%%%%%%%%%%%%%%%%%%%% Plot the results %%%%%%%%%%%%%%%%%%%%%figure(1)mm = 0;for jj = 1:ny	for ii = 1:nu		mm = mm+1;		subplot(ny, nu, mm)		plot(freq,db(squeeze(PolyTrans0.G(jj,ii,:))), 'k', freq, db(squeeze(PolyTrans.G(jj,ii,:))), 'r', ...             freq, db(squeeze(PolyTrans0.G(jj,ii,:)-PolyTrans.G(jj,ii,:))), 'k--', ...             freq, db(squeeze(CRbound.G(jj,ii,:)))/2, 'r--');        xlabel('Frequency (Hz)')        ylabel('G (dB)')	end % iiend % jjsubplot(ny, nu, ceil(nu/2));title('true value: black; estim.: red; diff.: black --; CR: red --');zoom on; shgfigure(2)mm = 0;for jj = 1:ny	for ii = 1:nu		mm = mm+1;		subplot(ny, nu, mm)		plot(freq,angle(squeeze(PolyTrans0.G(jj,ii,:)))*180/pi, 'k', ...             freq, angle(squeeze(PolyTrans.G(jj,ii,:)))*180/pi, 'r');        xlabel('Frequency (Hz)')        ylabel('angle(G) (°)')	end % iiend % jjsubplot(ny, nu, ceil(nu/2));title('true value: black; estim.: red');zoom on; shg