%% Single-input, single-output discrete-time system operating in unity feedback% excited by a random input. % A comparison is made between the estimate with and without knowledge controller (or reference signal). %% Rik Pintelon, 21 October 2011%clear allclose all%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Definition simulation parameters %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%N = 8000;               % number of time domain points Ts = 1;fs = 1/Ts;              % sampling frequencyfmin = 2.5000e-004;     % Hz, start of the frequency band of interestfmax = 0.3;             % Hz, stop frequency band of interest% selection of the corresponding DFT linesSelect = [floor(fmin/(fs/N))+1:1:floor(fmax/(fs/N))+1].';	% select from fmin to fmaxF = length(Select);                                         % number of frequencies in the frequency band of interestfreq = (Select-1)*fs/N;                                     % frequencies selected DFT lines%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Definition discrete-time plant and noise models %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% definition discrete-time plant modelb0 = 0.5*[0 1 0.5]; a0 = [1 -1.5 0.7];% definition discrete-time noise modelc0 = 0.1*[1 -1 0.9];d0 = [1 -0.2 0.5];%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Set the default values for the parametric identification %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% order plant and noise polynomialsna = length(a0)-1;      % denominator order plant modelnb = length(b0)-1;      % numerator oder plant modelnc = length(c0)-1;      % numerator order noise modelnd = length(d0)-1;      % denominator order noise model[Sel, Theta0, ModelVar, IterVar] = DefaultValues(na, nb, nc, nd, 1, 1, 'z', 'z', 'BJ');% transient = 1 by default% true parameter valuesTheta0.A = a0;Theta0.B(1,1,:) = b0;Theta0.C(1,1,:) = c0;Theta0.D = d0;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Simulation known input - noisy output data %% of the system operating in unity feedback  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% reference signalr = rand(1, N);% deterministic part input and outputu0 = filter(a0, a0+b0, r);y0 = filter(b0, a0+b0, r);% noisy part input and outputstde = 4;                       % value chosen such that value std(v) ~ std(u0)e = stde*randn(1, N);v = filter(conv(c0, a0), conv(d0, a0+b0), e);% known input, noisy outputu = u0 - v;y = y0 + v;%%%%%%%%%%%%%%%%%%%%%%%%%%%% Data for identification %%%%%%%%%%%%%%%%%%%%%%%%%%%%% Selection of the frequency band of interestU = fft(u,[],2)/sqrt(N);Y = fft(y,[],2)/sqrt(N);U = U(:, Select);Y = Y(:, Select);% case 1: known controller/reference signaldata1.Y = Y;    data1.U = U;data1.freq = freq;data1.Ts = Ts;data1.Gc = ones(1,1,F);          % feedback characteristic% case 2: unknonw controller/reference signaldata2 = data1;data2.Gc = [];%%%%%%%%%%%%%%%%%%%% Starting values %%%%%%%%%%%%%%%%%%%%% starting value plant model parametersFigNum = 1;ThetaStart = StartPlantModel(data1, Sel, ModelVar, IterVar, FigNum);% starting values noise modelFigNum = 2;ThetaStart = StartNoiseModel(data1, ThetaStart, Sel, ModelVar, IterVar, FigNum);%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Estimation BJ-model      %% case 1: known controller %%%%%%%%%%%%%%%%%%%%%%%%%%%%%[Theta1, Sel, Cost, smax, smin, wscale] = MIMO_BoxJenkins(data1, Sel, ThetaStart, ModelVar, IterVar);%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Cramer-Rao lower bound   %% case 1: known controller %%%%%%%%%%%%%%%%%%%%%%%%%%%%%[CRbound1, Theta1, CovThetan, Thetan, Seln, wscale, TheCond] = MIMO_CR_bound(data1, Sel, Theta1, ModelVar);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Estimation BJ-model        %% case 2: unknown controller %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[Theta2, Sel, Cost, smax, smin, wscale] = MIMO_BoxJenkins(data2, Sel, ThetaStart, ModelVar, IterVar);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Cramer-Rao lower bound     %% case 2: unknown controller %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%[CRbound2, Theta2, CovThetan, Thetan, Seln, wscale, TheCond] = MIMO_CR_bound(data2, Sel, Theta2, ModelVar);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Calculation true, estimated and measured noise power spectra %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%switch ModelVar.PlantPlane	case 'z', x.Plant = exp(-sqrt(-1)*2*pi*freq*Ts);	case 's', x.Plant = sqrt(-1)*2*pi*freq;endswitch ModelVar.NoisePlane	case 'z', x.Noise = exp(-sqrt(-1)*2*pi*freq*Ts);	case 's', x.Noise = sqrt(-1)*2*pi*freq;endPolyTrans0 = CalcPolyTrans(Theta0, x);PolyTrans1 = CalcPolyTrans(Theta1, x);PolyTrans2 = CalcPolyTrans(Theta2, x);S0 = CalcPowerSpectrum(PolyTrans0, stde^2);S1 = CalcPowerSpectrum(PolyTrans1, Theta1.CovE);S2 = CalcPowerSpectrum(PolyTrans2, Theta2.CovE);% calculate observed noise power spectrum% case 1: known controllerF = length(freq);data1.DC = 0;data1.Nyquist = 0;[TheError, CovE, gF, Err] = PredError(data1, PolyTrans1);Sy = zeros(1,1,F);for kk = 1:F	Sy(:,:,kk) = Err(:,kk)*Err(:,kk)';end % kk%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Calculation true poles, resonance frequencies, %% damping ratios, time constants                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Poles0 = struct('noise', [], 'plant', []);% the covariance has no meaning here% True plant poles[CovPoles0, dummy] = CovRoots(Theta0.A, eye(na+1), Sel.A, 'z', Ts);Poles0.plant = dummy;% True noise poles[CovPoles0, dummy] = CovRoots(Theta0.D, eye(nd+1), Sel.D, 'z', Ts);Poles0.noise = dummy;%%%%%%%%%%%%%%%%%%%%% Plot the results %%%%%%%%%%%%%%%%%%%%%% comparison true and estimated plant models: case 1, known controllerfigure(FigNum+1)plot(freq, db(squeeze(PolyTrans0.G)), 'k', freq, db(squeeze(PolyTrans1.G)), 'r', ...     freq, db(squeeze(PolyTrans0.G-PolyTrans1.G)), 'k--', ...     freq, db(squeeze(CRbound1.G))/2, 'r--');xlabel('Frequency (Hz)')ylabel('G (dB)')title('Known controller');legend('true value', 'estimate', 'difference', 'CR-bound', 'Location', 'EastOutside');zoom on; shgfigure(FigNum+2)plot(freq,angle(squeeze(PolyTrans0.G))*180/pi, 'k', ...     freq, angle(squeeze(PolyTrans1.G))*180/pi, 'r');xlabel('Frequency (Hz)')ylabel('angle(G) (°)')title('Known controller');legend('true value', 'estimate', 'Location', 'EastOutside');zoom on; shg% comparison measured and estimated noise model: case 1, known controllerfigure(FigNum+3)plot(freq, db(squeeze(Sy))/2, 'k+', freq ,db(squeeze(S1))/2, 'r');xlabel('Frequency (Hz)')ylabel('Noise power (dB)')title('Known controller');legend('measurement', 'estimate', 'Location', 'EastOutside');zoom on; shg% comparison true and estimated power spectra: case 1, known controllerfigure(FigNum+4)plot(freq, db(squeeze(S0))/2, 'k', freq, db(squeeze(S1))/2, 'r', ...     freq, db(squeeze(S0-S1))/2, 'k--', freq, db(squeeze(CRbound1.NoisePower))/4, 'r--');xlabel('Frequency (Hz)')ylabel('Noise power (dB)')title('Known controller');legend('true value', 'estimate', 'difference', 'CR-bound', 'Location', 'EastOutside');zoom on; shg% comparison true and estimated plant models: case 2, unknown controllerfigure(FigNum+5)plot(freq, db(squeeze(PolyTrans0.G)), 'k', freq, db(squeeze(PolyTrans2.G)), 'r', ...     freq, db(squeeze(PolyTrans0.G-PolyTrans2.G)), 'k--', ...     freq, db(squeeze(CRbound2.G))/2, 'r--');xlabel('Frequency (Hz)')ylabel('G (dB)')title('Unknown controller');legend('true value', 'estimate', 'difference', 'CR-bound', 'Location', 'EastOutside');zoom on; shgfigure(FigNum+6)plot(freq,angle(squeeze(PolyTrans0.G))*180/pi, 'k', ...     freq, angle(squeeze(PolyTrans2.G))*180/pi, 'r');xlabel('Frequency (Hz)')ylabel('angle(G) (°)')title('Unknown controller');legend('true value', 'estimate', 'Location', 'EastOutside');zoom on; shg% comparison true and estimated power spectra: case 2, unknown controllerfigure(FigNum+7)plot(freq, db(squeeze(S0))/2, 'k', freq, db(squeeze(S2))/2, 'r', ...     freq, db(squeeze(S0-S2))/2, 'k--', freq, db(squeeze(CRbound2.NoisePower))/4, 'r--');xlabel('Frequency (Hz)')ylabel('Noise power (dB)')title('Unknown controller');legend('true value', 'estimate', 'difference', 'CR-bound', 'Location', 'EastOutside');zoom on; shg% comparison true and estimated resonance frequencies plant: case 1, known reference signal disp('Estimates with reference signal')disp('Estim. f0 [Hz], std(f0) [Hz], estim. - true [Hz]')[Theta1.plant.poles.freq, CRbound1.plant.poles.freq.^0.5, Theta1.plant.poles.freq-Poles0.plant.freq]% comparison true and estimated damping ratios plant: case 1, known reference signal disp('Estim. damping, std(damping), estim. - true')[Theta1.plant.poles.damp, CRbound1.plant.poles.damp.^0.5, Theta1.plant.poles.damp-Poles0.plant.damp]% comparison true and estimated resonance frequencies noise: case 1, known reference signal disp('Estimates with reference signal')disp('Estim. f0 [Hz], std(f0) [Hz], estim. - true [Hz]')[Theta1.noise.poles.freq, CRbound1.noise.poles.freq.^0.5, Theta1.noise.poles.freq-Poles0.noise.freq]% comparison true and estimated damping ratios noise: case 1, known reference signal disp('Estim. damping, std(damping), estim. - true')[Theta1.noise.poles.damp, CRbound1.noise.poles.damp.^0.5, Theta1.noise.poles.damp-Poles0.noise.damp]