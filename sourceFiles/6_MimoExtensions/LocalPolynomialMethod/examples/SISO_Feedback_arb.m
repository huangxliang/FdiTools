%% Single-input, single-output (SISO) system operating in unity feedback% excited by an random input% Known input, noisy output case (generalized output error) %% Rik Pintelon, 22 September 2011%clear allclose all%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Definition discrete-time plant and noise models %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% definition discrete-time plant modelB = 0.5*[0 1 0.5]; A = [1 -1.5 0.7];% definition discrete-time noise modelC = 0.1*[1 -1 0.9];D = [1 -0.2 0.5];N = 8000;               % number of time domain points fs = 1;                 % sampling frequency%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Simulation known input - noisy output data %% of the system operating in unity feedback  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% reference signalr = rand(1, N);% deterministic part input and outputu0 = filter(A, A+B, r);y0 = filter(B, A+B, r);% noisy part input and outpute = randn(1, N);v = filter(conv(C, A), conv(D, A+B), e);% known input, noisy outputu = u0 - v;y = y0 + v;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Calling the ArbLocalPolyAnal function %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% data data.u = u;                             % row index is the input number; the column index the time instant (in samples) data.y = y;                             % row index is the output number; the column index the time instant (in samples) data.r = r;                             % the reference signal is needed to obtain consistent nonparametric FRF estimates in feedbackdata.Ts = 1/fs;                         % sampling period% methodmethod.dof = 20;                        % degrees of freedom of the variance estimatemethod.order = 2;                       % order local polynomial approximation% local polynomial estimate FRF and its variance[CZ, Z, freq, G, CvecG, dof, CL] = ArbLocalPolyAnal(data, method);G = squeeze(G);                         % FRF estimatevarG = squeeze(CvecG);                  % variance FRF estimatevarVy = squeeze(CZ.n(1,1,:));           % estimate output noise variancevarVu = squeeze(CZ.n(2,2,:));           % estimate input noise variance%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Comparison estimates and true values %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% true FRFq = exp(-sqrt(-1)*2*pi*freq/fs);        % z^(-1) as a function of the frequency G0 = polyval(fliplr(B), q) ./ polyval(fliplr(A), q);G0 = G0.';% true noise modelH0 = polyval(fliplr(C), q) ./ polyval(fliplr(D), q);H0 = H0.';varVu_0 = abs((H0./(1+G0)).^2).';                     % true input noise variancevarVy_0 = abs((H0./(1+G0)).^2).';                     % true output noise variance% plot the true plant and noise modelsfigure(1)plot(freq, db(G0), 'k', freq, db(H0), 'k--')xlabel('Frequency (Hz)')ylabel('Amplitude (dB)')title('True plant G_0 and noise H_0 models')legend('G_0', 'H_0', 'Location', 'EastOutside');zoom on;shg% comparison true and estimated FRFfigure(2)plot(freq, db(G), 'r', freq, db(G0), 'k', freq, db(G-G0), 'k--', freq, db(varG)/2, 'r--');xlabel('Frequency (Hz)')ylabel('Amplitude (dB)')title('Comparison estimated G and true G_0  FRF')legend('G-estimate', 'G_0', '|G-G_0|', 'var(G)', 'Location', 'EastOutside');zoom on;shg% comparison true and estimated input-output noise variancesfigure(3)subplot(211)plot(freq, db(varVu)/2, 'r', freq, db(varVu_0)/2, 'k');xlabel('Frequency (Hz)')ylabel('Input variance (dB)')legend('estim. input var.', 'true input var.', 'Location', 'EastOutside');subplot(212)plot(freq, db(varVy)/2, 'r', freq, db(varVy_0)/2, 'k');xlabel('Frequency (Hz)')ylabel('Output variance (dB)')legend('estim. output var.', 'true output var.', 'Location', 'EastOutside');zoom on;shg