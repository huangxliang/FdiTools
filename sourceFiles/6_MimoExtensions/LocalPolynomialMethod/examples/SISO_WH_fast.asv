%% Single-input, single-output (SISO) continuous-time Wiener-Hammerstein (WH) system% excited by a random phase multisine% The continuous-time Wiener-Hammerstein system consists of the cascade of %  %   1. a second order system:           G1(s) = 1/(1 + s/(Q*w0) + s^2/w0^2)%   2. a static nonlinear function:     5*tanh(x/5) %   3. a first order system:            G2(s) = 1/(1 + Tau*s) %% Noisy input, noisy output case (errors-in-variables problem) %% Rik Pintelon, 3 Otcober 2011%clear all;close all;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Definition of the Wiener-Hammerstein system %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% second order system G1(s)f0 = 1000;								% resonance frequency at 1 kHzQ = 10;									% quality factor% first order system G2(s)Tau = 1/(2*pi*300);						% 3 dB point at 300 Hz% sampling frequency: 12.5 times oversampling to avoid alias problemsfs = 5e4;								% 50 kHz%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Definition of the actuator characteristic %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2th order Chebyshev filter with a passband ripple of 6 dB and% a cutoff frequency of 2000 Hz[bcheb, acheb] = cheby1(4, 6, 2*pi*2000, 's');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Definition random phase multisine excitation % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% random phase multisine parametersfmax = 2000;							% maximal frequency 2 kHzF = 500;								% number of frequencies (0, fmax]N = fs/fmax*F;							% number of points per periodAmpl = ones(1,F);						% amplitudes random phase multisineExcitedHarm = [1:1:F];                  % the excited harmonics multisinerms_r = 1;                              % rms value multisine% parameters experimentP = 2;                                  % number of consecutive periods multisine%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Disturbing input/output noise %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%stdu = rms_r/10;                        % white input noise standard deviationstdy = sqrt(N/2/F)/50;                  % white output noise standard deviation%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Continuous-time FRFs (actuator and WH-system) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% calculation linear transfer functions actuator and WH-system from DC to Nyquist% at the resolution of the multisine periodfreqN = [0:1:N/2]*fs/N;sN =  2*pi*freqN*sqrt(-1);Gfirst = 1./polyval([1/(2*pi*f0)^2 1/(Q*2*pi*f0) 1], sN);Gsecond = 1./polyval([Tau 1], sN);Gactuator = polyval(bcheb, sN) ./ polyval(acheb, sN);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Steady state response WH-system to periodic input %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% reference signal r(t) = random phase multisinePhasor = exp(sqrt(-1)*2*pi*rand(size(ExcitedHarm)));	% uniformly distributed phases [0,2*pi)R = [0 Ampl.*Phasor zeros(1,N-F-1)];                    % input spectrum to calculate r(t)r = 2*real(ifft(R));                                    % take 2 times real part since complex conjugate was not added in Rr = rms_r*r/std(r);                                     % input must have an rms value equal to rms_r% steady state response actuator to reference signal% u0(t) = the noiseless output of the actuatorR = fft(r);U0 = zeros(1,N);U0(1:N/2+1) = Gactuator.*R(1:N/2+1);% take 2 times real part since the complex conjugate was not added in U0% DC and Nyquist are not multiplied by 2U0(2:N/2) = 2*U0(2:N/2);u0 = real(ifft(U0));% calculate the noiseless output y0(t) of the Wiener-Hammerstein system	[y0, z] = WienerHammerstein(u0, Gfirst, 'tanh', 5, Gsecond);     % add the white noise disturbances to P=2 periods of the input and output signals u = repmat(u0, [1, P]) + stdu*randn(1, P*N);y = repmat(y0, [1, P]) + stdy*randn(1, P*N);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Calling the FastLocalPolyAnal function %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% data data.u = u;                             % row index is the input number; the column index the time instant (in samples) data.y = y;                             % row index is the output number; the column index the time instant (in samples) data.r = r;                             % one period of the reference signal is sufficient data.N = N;                             % number of samples in one period data.Ts = 1/fs;                         % sampling period data.ExcitedHarm = ExcitedHarm;         % excited harmonics multisine excitation% specification of the local polynomial methodmethod.dof = 6;                         % degrees of freedom of the noise variance estimatemethod.transient = 0;                   % no transient removal is needed because:                                        %	1. the steady state response is calculated                                        %	2. white input-output noise[CZ, Z, freq, G, CvecG, dof, CL] = FastLocalPolyAnal(data, method);% FRF and its varianceG = squeeze(G).';varGn = squeeze(CvecG.n).';              % noise variancevarGNL = squeeze(CvecG.NL).';            % total variance (noise + NL distortions)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% True best linear approximation (BLA)  = alpha * Gfirst * Gsecond %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%G_BLA = Gfirst(2:F+1) .* Gsecond(2:F+1);% estimate alpha in least square sensealpha = sum(real(G_BLA .* conj(G))) / sum(abs(G_BLA.^2));G_BLA = alpha*G_BLA;%%%%%%%%%%%% Figures %%%%%%%%%%%%% estimated BLA, its noise and total variancesfigure(1)plot(freq, db(G), 'k', freq, db(varGn)/2, 'g', freq, db(varGNL)/2, 'r')xlabel('Frequency (Hz)')ylabel('{\itG}_{BLA} (dB)')title('Estimated BLA and its variances')legend('{\itG}_{BLA}', 'noise variance', 'total variance', 'Location', 'EastOutside');zoom onshg% comparison true BLA with estimated BLAfigure(2)plot(freq, db(G), 'k', freq, db(G_BLA), 'k--', ...     freq, db(G-G_BLA), 'b', freq, db(varGNL)/2, 'r')xlabel('Frequency (Hz)')ylabel('Amplitude (dB)')title('Comparison estimated and true BLA')legend('estimated BLA', 'true BLA', 'difference', 'total variance', 'Location', 'EastOutside');zoom onshg%%